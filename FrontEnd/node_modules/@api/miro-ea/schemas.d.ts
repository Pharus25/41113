declare const CopyBoard: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the board.";
                readonly maxLength: 300;
                readonly minLength: 0;
            };
            readonly name: {
                readonly type: "string";
                readonly default: "Untitled";
                readonly description: "Name for the board.";
                readonly maxLength: 60;
                readonly minLength: 1;
            };
            readonly policy: {
                readonly type: "object";
                readonly description: "Defines the permissions policies and sharing policies for the board.";
                readonly properties: {
                    readonly permissionsPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the permissions policies for the board.";
                        readonly properties: {
                            readonly collaborationToolsStartAccess: {
                                readonly type: "string";
                                readonly default: "all_editors";
                                readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                            };
                            readonly copyAccess: {
                                readonly type: "string";
                                readonly default: "anyone";
                                readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.";
                                readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                            };
                            readonly sharingAccess: {
                                readonly type: "string";
                                readonly default: "team_members_with_editing_rights";
                                readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                            };
                        };
                    };
                    readonly sharingPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                        readonly properties: {
                            readonly access: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the public-level access to the board.";
                                readonly enum: readonly ["private", "view", "edit", "comment"];
                            };
                            readonly inviteToAccountAndBoardLinkAccess: {
                                readonly type: "string";
                                readonly default: "no_access";
                                readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.";
                                readonly enum: readonly ["viewer", "commenter", "editor", "no_access"];
                            };
                            readonly organizationAccess: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                            readonly teamAccess: {
                                readonly type: "string";
                                readonly description: "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                        };
                    };
                };
            };
            readonly teamId: {
                readonly type: "string";
                readonly description: "Unique identifier (ID) of the team where the board must be placed.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly copy_from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board that you want to copy.";
                };
            };
            readonly required: readonly ["copy_from"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the board.";
                    readonly examples: readonly ["uXjVOD6LSME="];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the board.";
                    readonly examples: readonly ["Sample board name"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the board.";
                    readonly examples: readonly ["Sample board description"];
                };
                readonly team: {
                    readonly required: readonly ["id", "name"];
                    readonly type: "object";
                    readonly description: "Contains information about the team with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the team.";
                            readonly examples: readonly ["3088887345710753000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the team.";
                            readonly examples: readonly ["Marketing team"];
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "Contains information about the cover picture of the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the cover picture for the board.";
                            readonly examples: readonly [3458764514006802400];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly imageURL: {
                            readonly type: "string";
                            readonly description: "URL of the cover picture of the board.";
                            readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                        };
                    };
                };
                readonly policy: {
                    readonly type: "object";
                    readonly description: "Defines the permissions policies and sharing policies for the board.";
                    readonly properties: {
                        readonly permissionsPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the permissions policies for the board.";
                            readonly properties: {
                                readonly collaborationToolsStartAccess: {
                                    readonly type: "string";
                                    readonly default: "all_editors";
                                    readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\n\n`all_editors` `board_owners_and_coowners`";
                                    readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                                };
                                readonly copyAccess: {
                                    readonly type: "string";
                                    readonly default: "anyone";
                                    readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\n\n`anyone` `team_members` `team_editors` `board_owner`";
                                    readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                                };
                                readonly sharingAccess: {
                                    readonly type: "string";
                                    readonly default: "team_members_with_editing_rights";
                                    readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\n\n`team_members_with_editing_rights` `owner_and_coowners`";
                                    readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                                };
                            };
                        };
                        readonly sharingPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                            readonly properties: {
                                readonly access: {
                                    readonly type: "string";
                                    readonly description: "Defines the public-level access to the board.\n\n`private` `view` `edit` `comment`";
                                    readonly enum: readonly ["private", "view", "edit", "comment"];
                                };
                                readonly inviteToAccountAndBoardLinkAccess: {
                                    readonly type: "string";
                                    readonly default: "no_access";
                                    readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\n\n`viewer` `commenter` `editor` `coowner` `owner` `guest` `no_access`";
                                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"];
                                };
                                readonly organizationAccess: {
                                    readonly type: "string";
                                    readonly default: "private";
                                    readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                                readonly teamAccess: {
                                    readonly type: "string";
                                    readonly description: "Defines the team-level access to the board.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                            };
                        };
                    };
                };
                readonly viewLink: {
                    readonly type: "string";
                    readonly description: "URL to view the board.";
                    readonly examples: readonly ["https://miro.com/app/board/uXjVOD6LSME="];
                };
                readonly owner: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly currentUserMembership: {
                    readonly type: "object";
                    readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                            readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                            readonly examples: readonly ["board_member"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the board.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the board members associated with the board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0"];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, type returns `board`.";
                    readonly examples: readonly ["board"];
                };
            };
            readonly required: readonly ["description", "id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateAppCardItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains app card item data, such as the title, description, or fields.";
                readonly properties: {
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A short text description to add context about the app card.";
                        readonly examples: readonly ["Sample app card description"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                            readonly properties: {
                                readonly fillColor: {
                                    readonly type: "string";
                                    readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                    readonly examples: readonly ["#2fa9e3"];
                                };
                                readonly iconShape: {
                                    readonly type: "string";
                                    readonly default: "round";
                                    readonly description: "The shape of the icon on the preview field.";
                                    readonly enum: readonly ["round", "square"];
                                };
                                readonly iconUrl: {
                                    readonly type: "string";
                                    readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                    readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                };
                                readonly textColor: {
                                    readonly type: "string";
                                    readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                    readonly examples: readonly ["#1a1a1a"];
                                };
                                readonly tooltip: {
                                    readonly type: "string";
                                    readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                    readonly examples: readonly ["Completion status indicator"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                    readonly examples: readonly ["Status: in progress"];
                                };
                            };
                        };
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly default: "disconnected";
                        readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.";
                        readonly enum: readonly ["disconnected", "connected", "disabled"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly default: "sample app card item";
                        readonly description: "A short text header to identify the app card.";
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of an app card item, such as the fill color.";
                readonly properties: {
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains app card item data, such as the title, description, or fields.";
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the app card.";
                            readonly examples: readonly ["Sample app card description"];
                        };
                        readonly fields: {
                            readonly type: "array";
                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                readonly properties: {
                                    readonly fillColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                        readonly examples: readonly ["#2fa9e3"];
                                    };
                                    readonly iconShape: {
                                        readonly type: "string";
                                        readonly default: "round";
                                        readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                        readonly enum: readonly ["round", "square"];
                                    };
                                    readonly iconUrl: {
                                        readonly type: "string";
                                        readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                        readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                    };
                                    readonly textColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                        readonly examples: readonly ["#1a1a1a"];
                                    };
                                    readonly tooltip: {
                                        readonly type: "string";
                                        readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                        readonly examples: readonly ["Completion status indicator"];
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                        readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                        readonly examples: readonly ["Status: in progress"];
                                    };
                                };
                            };
                        };
                        readonly owned: {
                            readonly type: "boolean";
                            readonly description: "Defines whether the card is owned by the application making the call.";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                            readonly enum: readonly ["disconnected", "connected", "disabled"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the app card.";
                            readonly examples: readonly ["sample app card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of an app card item, such as the fill color.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["app_card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateBoard: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the board.";
                readonly maxLength: 300;
                readonly minLength: 0;
            };
            readonly name: {
                readonly type: "string";
                readonly default: "Untitled";
                readonly description: "Name for the board.";
                readonly maxLength: 60;
                readonly minLength: 1;
            };
            readonly policy: {
                readonly type: "object";
                readonly description: "Defines the permissions policies and sharing policies for the board.";
                readonly properties: {
                    readonly permissionsPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the permissions policies for the board.";
                        readonly properties: {
                            readonly collaborationToolsStartAccess: {
                                readonly type: "string";
                                readonly default: "all_editors";
                                readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                            };
                            readonly copyAccess: {
                                readonly type: "string";
                                readonly default: "anyone";
                                readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.";
                                readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                            };
                            readonly sharingAccess: {
                                readonly type: "string";
                                readonly default: "team_members_with_editing_rights";
                                readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                            };
                        };
                    };
                    readonly sharingPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                        readonly properties: {
                            readonly access: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the public-level access to the board.";
                                readonly enum: readonly ["private", "view", "edit", "comment"];
                            };
                            readonly inviteToAccountAndBoardLinkAccess: {
                                readonly type: "string";
                                readonly default: "no_access";
                                readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.";
                                readonly enum: readonly ["viewer", "commenter", "editor", "no_access"];
                            };
                            readonly organizationAccess: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                            readonly teamAccess: {
                                readonly type: "string";
                                readonly description: "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                        };
                    };
                };
            };
            readonly teamId: {
                readonly type: "string";
                readonly description: "Unique identifier (ID) of the team where the board must be placed.\n\n**Note**: On Enterprise plan, boards can be moved via API by Board Owners, Co-Owners, and Content Admins. This behavior differs from the Miro UI, where only Board Owners can move boards. This difference is **intentional** and works as designed. On non-Enterprise plans, only Board Owners can move boards between teams—both via the API and the Miro UI.";
            };
            readonly projectId: {
                readonly type: "string";
                readonly description: "Unique identifier (ID) of the project to which the board must be added.\n\n**Note**: Projects have been renamed to Spaces. Use this parameter to update the space.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the board.";
                    readonly examples: readonly ["uXjVOD6LSME="];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the board.";
                    readonly examples: readonly ["Sample board name"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the board.";
                    readonly examples: readonly ["Sample board description"];
                };
                readonly team: {
                    readonly required: readonly ["id", "name"];
                    readonly type: "object";
                    readonly description: "Contains information about the team with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the team.";
                            readonly examples: readonly ["3088887345710753000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the team.";
                            readonly examples: readonly ["Marketing team"];
                        };
                    };
                };
                readonly project: {
                    readonly type: "object";
                    readonly description: "Contains information about the project with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the project.";
                            readonly examples: readonly ["3088887345710756000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "Contains information about the cover picture of the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the cover picture for the board.";
                            readonly examples: readonly [3458764514006802400];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly imageURL: {
                            readonly type: "string";
                            readonly description: "URL of the cover picture of the board.";
                            readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                        };
                    };
                };
                readonly policy: {
                    readonly type: "object";
                    readonly description: "Defines the permissions policies and sharing policies for the board.";
                    readonly properties: {
                        readonly permissionsPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the permissions policies for the board.";
                            readonly properties: {
                                readonly collaborationToolsStartAccess: {
                                    readonly type: "string";
                                    readonly default: "all_editors";
                                    readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\n\n`all_editors` `board_owners_and_coowners`";
                                    readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                                };
                                readonly copyAccess: {
                                    readonly type: "string";
                                    readonly default: "anyone";
                                    readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\n\n`anyone` `team_members` `team_editors` `board_owner`";
                                    readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                                };
                                readonly sharingAccess: {
                                    readonly type: "string";
                                    readonly default: "team_members_with_editing_rights";
                                    readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\n\n`team_members_with_editing_rights` `owner_and_coowners`";
                                    readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                                };
                            };
                        };
                        readonly sharingPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                            readonly properties: {
                                readonly access: {
                                    readonly type: "string";
                                    readonly description: "Defines the public-level access to the board.\n\n`private` `view` `edit` `comment`";
                                    readonly enum: readonly ["private", "view", "edit", "comment"];
                                };
                                readonly inviteToAccountAndBoardLinkAccess: {
                                    readonly type: "string";
                                    readonly default: "no_access";
                                    readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\n\n`viewer` `commenter` `editor` `coowner` `owner` `guest` `no_access`";
                                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"];
                                };
                                readonly organizationAccess: {
                                    readonly type: "string";
                                    readonly default: "private";
                                    readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                                readonly teamAccess: {
                                    readonly type: "string";
                                    readonly description: "Defines the team-level access to the board.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                            };
                        };
                    };
                };
                readonly viewLink: {
                    readonly type: "string";
                    readonly description: "URL to view the board.";
                    readonly examples: readonly ["https://miro.com/app/board/uXjVOD6LSME="];
                };
                readonly owner: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly currentUserMembership: {
                    readonly type: "object";
                    readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                            readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                            readonly examples: readonly ["board_member"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the board.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the board members associated with the board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0"];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, type returns `board`.";
                    readonly examples: readonly ["board"];
                };
            };
            readonly required: readonly ["description", "id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateCardItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                readonly properties: {
                    readonly assigneeId: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                        readonly examples: readonly ["3074457362577955300"];
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A short text description to add context about the card.";
                        readonly examples: readonly ["sample card description"];
                    };
                    readonly dueDate: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                        readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly default: "sample card item";
                        readonly description: "A short text header for the card.";
                        readonly examples: readonly ["sample card item"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a card item, such as the card theme.";
                readonly properties: {
                    readonly cardTheme: {
                        readonly type: "string";
                        readonly description: "Hex value of the border color of the card.\nDefault: `#2d9bf0`.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                    readonly properties: {
                        readonly assigneeId: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the card.";
                            readonly examples: readonly ["sample card description"];
                        };
                        readonly dueDate: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly default: "sample card item";
                            readonly description: "A short text header for the card.";
                            readonly examples: readonly ["sample card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a card item, such as the card theme.";
                    readonly properties: {
                        readonly cardTheme: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateConnector: {
    readonly body: {
        readonly type: "object";
        readonly description: "startItem.id must be different from endItem.id";
        readonly properties: {
            readonly startItem: {
                readonly type: "object";
                readonly description: "The end point of the connector. endItem.id must be different from startItem.id";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.";
                        readonly examples: readonly ["3458764517517818867"];
                    };
                    readonly position: {
                        readonly type: "object";
                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                        readonly properties: {
                            readonly x: {
                                readonly type: "string";
                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["50%"];
                            };
                            readonly y: {
                                readonly type: "string";
                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["0%"];
                            };
                        };
                    };
                    readonly snapTo: {
                        readonly type: "string";
                        readonly description: "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.";
                        readonly enum: readonly ["auto", "top", "right", "bottom", "left"];
                    };
                };
            };
            readonly endItem: {
                readonly type: "object";
                readonly description: "The end point of the connector. endItem.id must be different from startItem.id";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.";
                        readonly examples: readonly ["3458764517517818867"];
                    };
                    readonly position: {
                        readonly type: "object";
                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                        readonly properties: {
                            readonly x: {
                                readonly type: "string";
                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["50%"];
                            };
                            readonly y: {
                                readonly type: "string";
                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["0%"];
                            };
                        };
                    };
                    readonly snapTo: {
                        readonly type: "string";
                        readonly description: "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.";
                        readonly enum: readonly ["auto", "top", "right", "bottom", "left"];
                    };
                };
            };
            readonly shape: {
                readonly type: "string";
                readonly description: "The path type of the connector line, defines curvature. Default: curved.";
                readonly enum: readonly ["straight", "elbowed", "curved"];
            };
            readonly captions: {
                readonly type: "array";
                readonly description: "Blocks of text you want to display on the connector.";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Contains the connector's caption data, such as content and its position.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                            readonly maxLength: 200;
                            readonly minLength: 0;
                            readonly examples: readonly ["<p>Caption text</p>"];
                        };
                        readonly position: {
                            readonly type: "string";
                            readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                            readonly examples: readonly ["50%"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "The vertical position of the text on the connector. Default: middle";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                    readonly required: readonly ["content"];
                };
                readonly maxItems: 20;
                readonly maxLength: 20;
                readonly minItems: 0;
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                readonly properties: {
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`";
                        readonly examples: readonly ["#9510ac"];
                    };
                    readonly endStrokeCap: {
                        readonly type: "string";
                        readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: stealth.";
                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Defines the font size, in dp, for the captions on the connector. Default: 14";
                        readonly maximum: 288;
                        readonly minimum: 10;
                        readonly examples: readonly ["15"];
                    };
                    readonly startStrokeCap: {
                        readonly type: "string";
                        readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: none.";
                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                    };
                    readonly strokeColor: {
                        readonly type: "string";
                        readonly description: "Hex value of the color of the connector line. Default: #000000.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                    readonly strokeStyle: {
                        readonly type: "string";
                        readonly description: "The stroke pattern of the connector line. Default: normal.";
                        readonly enum: readonly ["normal", "dotted", "dashed"];
                    };
                    readonly strokeWidth: {
                        readonly type: "string";
                        readonly description: "The thickness of the connector line, in dp. Default: 1.0.";
                        readonly maximum: 24;
                        readonly minimum: 1;
                        readonly examples: readonly ["2.0"];
                    };
                    readonly textOrientation: {
                        readonly type: "string";
                        readonly description: "The captions orientation relatively to the connector line curvature. Default: aligned.";
                        readonly enum: readonly ["horizontal", "aligned"];
                    };
                };
            };
        };
        readonly required: readonly ["endItem", "startItem"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board for which you want to create the connector.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Contains the result data.";
            readonly properties: {
                readonly captions: {
                    readonly type: "array";
                    readonly description: "Blocks of text you want to display on the connector.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the connector's caption data, such as content and its position.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                                readonly maxLength: 200;
                                readonly minLength: 0;
                                readonly examples: readonly ["<p>Caption text</p>"];
                            };
                            readonly position: {
                                readonly type: "string";
                                readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                                readonly examples: readonly ["50%"];
                            };
                            readonly textAlignVertical: {
                                readonly type: "string";
                                readonly description: "The vertical position of the text on the connector. Default: middle\n\n`top` `middle` `bottom`";
                                readonly enum: readonly ["top", "middle", "bottom"];
                            };
                        };
                        readonly required: readonly ["content"];
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly endItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of a connector.";
                    readonly examples: readonly ["3458764517517818867"];
                };
                readonly isSupported: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.";
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the current object.";
                    readonly properties: {
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain more information about the current object.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly shape: {
                    readonly type: "string";
                    readonly default: "curved";
                    readonly description: "The path type of the connector line, defines curvature. Default: curved.\n\n`straight` `elbowed` `curved`";
                    readonly enum: readonly ["straight", "elbowed", "curved"];
                };
                readonly startItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`";
                            readonly examples: readonly ["#9510ac"];
                        };
                        readonly endStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: stealth.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the captions on the connector. Default: 14";
                            readonly maximum: 288;
                            readonly minimum: 10;
                            readonly examples: readonly ["15"];
                        };
                        readonly startStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: none.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly strokeColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the color of the connector line. Default: #000000.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                        readonly strokeStyle: {
                            readonly type: "string";
                            readonly description: "The stroke pattern of the connector line. Default: normal.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly strokeWidth: {
                            readonly type: "string";
                            readonly description: "The thickness of the connector line, in dp. Default: 1.0.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                            readonly examples: readonly ["2.0"];
                        };
                        readonly textOrientation: {
                            readonly type: "string";
                            readonly description: "The captions orientation relatively to the connector line curvature. Default: aligned.\n\n`horizontal` `aligned`";
                            readonly enum: readonly ["horizontal", "aligned"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of board object that is returned.";
                };
            };
            readonly required: readonly ["id"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateDocumentItemUsingUrl: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the document URL.";
                readonly properties: {
                    readonly title: {
                        readonly type: "string";
                        readonly description: "A short text header to identify the document.";
                        readonly examples: readonly ["Sample document title"];
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly default: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";
                        readonly description: "URL where the document is hosted.";
                        readonly examples: readonly ["https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"];
                    };
                };
                readonly required: readonly ["url"];
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly required: readonly ["data"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly documentUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the document.";
                            readonly examples: readonly ["Sample document title"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["document"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateEmbedItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the embed URL.";
                readonly properties: {
                    readonly mode: {
                        readonly type: "string";
                        readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.";
                        readonly enum: readonly ["inline", "modal"];
                    };
                    readonly previewUrl: {
                        readonly type: "string";
                        readonly description: "URL of the image to be used as the preview image for the embedded item.";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly default: "https://www.youtube.com/watch?v=HlVSNEiFCBk";
                        readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                    };
                };
                readonly required: readonly ["url"];
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly required: readonly ["data"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly contentType: {
                            readonly type: "string";
                            readonly description: "Type of the embedded item's content.";
                            readonly examples: readonly ["video"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Short description of the embedded item.";
                            readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                        };
                        readonly html: {
                            readonly type: "string";
                            readonly description: "Html code of the embedded item.";
                            readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                        };
                        readonly mode: {
                            readonly type: "string";
                            readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                            readonly enum: readonly ["inline", "modal"];
                        };
                        readonly previewUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly providerName: {
                            readonly type: "string";
                            readonly description: "Name of the content's provider.";
                            readonly examples: readonly ["YouTube"];
                        };
                        readonly providerUrl: {
                            readonly type: "string";
                            readonly description: "Url of the content's provider.";
                            readonly examples: readonly ["https://www.youtube.com/"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title of the embedded item.";
                            readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                            readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["embed"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateImageItemUsingUrl: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the image URL.";
                readonly properties: {
                    readonly title: {
                        readonly type: "string";
                        readonly description: "A short text header to identify the image.";
                        readonly examples: readonly ["Sample image title"];
                    };
                    readonly altText: {
                        readonly type: "string";
                        readonly description: "A description (alt-text) to help people understand what is depicted here.";
                        readonly examples: readonly ["Sample image alt text"];
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly default: "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png";
                        readonly description: "URL of the image.";
                        readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                    };
                };
                readonly required: readonly ["url"];
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly required: readonly ["data"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly imageUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the image.";
                            readonly examples: readonly ["Sample image title"];
                        };
                        readonly altText: {
                            readonly type: "string";
                            readonly description: "A description (alt-text) to help people understand what is depicted here.";
                            readonly examples: readonly ["Sample image alt text"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["image"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateShapeItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains shape item data, such as the content or the type of the shape.";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The text you want to display on the shape.";
                        readonly examples: readonly ["Hello"];
                    };
                    readonly shape: {
                        readonly type: "string";
                        readonly default: "rectangle";
                        readonly description: "Defines the geometric shape of the item when it is rendered on the board.";
                        readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the shape style, such as the border color or opacity.";
                readonly properties: {
                    readonly borderColor: {
                        readonly type: "string";
                        readonly description: "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray).";
                    };
                    readonly borderOpacity: {
                        readonly type: "string";
                        readonly description: "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: If a value for `borderColor` is passed, the default value for `borderColor` is `1.0`. If a value for `borderColor` is not passed, the default value is `0.0`.";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly borderStyle: {
                        readonly type: "string";
                        readonly description: "Defines the style used to represent the border of the shape.\nDefault: `normal`.";
                        readonly enum: readonly ["normal", "dotted", "dashed"];
                    };
                    readonly borderWidth: {
                        readonly type: "string";
                        readonly description: "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.";
                        readonly maximum: 24;
                        readonly minimum: 1;
                    };
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.";
                        readonly examples: readonly ["#1a1a1a"];
                    };
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.";
                        readonly examples: readonly ["#8fd14f"];
                    };
                    readonly fillOpacity: {
                        readonly type: "string";
                        readonly description: "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly fontFamily: {
                        readonly type: "string";
                        readonly description: "Defines the font type for the text in the shape item.\nDefault: `arial`.";
                        readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.";
                        readonly maximum: 288;
                        readonly minimum: 10;
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                    readonly textAlignVertical: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.";
                        readonly enum: readonly ["top", "middle", "bottom"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains shape item data, such as the content or the type of the shape.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The text you want to display on the shape.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "rectangle";
                            readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                            readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the shape style, such as the border color or opacity.";
                    readonly properties: {
                        readonly borderColor: {
                            readonly type: "string";
                            readonly description: "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray).";
                        };
                        readonly borderOpacity: {
                            readonly type: "string";
                            readonly description: "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: If a value for `borderColor` is passed, the default value for `borderColor` is `1.0`. If a value for `borderColor` is not passed, the default value is `0.0`.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly borderStyle: {
                            readonly type: "string";
                            readonly description: "Defines the style used to represent the border of the shape.\nDefault: `normal`.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly borderWidth: {
                            readonly type: "string";
                            readonly description: "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                        };
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.";
                            readonly examples: readonly ["#8fd14f"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Defines the font type for the text in the shape item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.";
                            readonly maximum: 288;
                            readonly minimum: 10;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["shape"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateStickyNoteItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The actual text (content) that appears in the sticky note item.";
                        readonly examples: readonly ["Hello"];
                    };
                    readonly shape: {
                        readonly type: "string";
                        readonly default: "square";
                        readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.";
                        readonly enum: readonly ["square", "rectangle"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a sticky note item, such as the fill color or text alignment.";
                readonly properties: {
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Fill color for the sticky note.\nDefault: `light_yellow`.";
                        readonly enum: readonly ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"];
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                    readonly textAlignVertical: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.";
                        readonly enum: readonly ["top", "middle", "bottom"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the sticky note item.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "square";
                            readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                            readonly enum: readonly ["square", "rectangle"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a sticky note item, such as the fill color or text alignment.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the sticky note.\nDefault: `light_yellow`.\n\n`gray` `light_yellow` `yellow` `orange` `light_green` `green` `dark_green` `cyan` `light_pink` `pink` `violet` `red` `light_blue` `blue` `dark_blue` `black`";
                            readonly enum: readonly ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"];
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["sticky_note"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateTextItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The actual text (content) that appears in the text item.";
                        readonly examples: readonly ["Hello"];
                    };
                };
                readonly required: readonly ["content"];
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a text item, such as the fill color or font family.";
                readonly properties: {
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.";
                        readonly examples: readonly ["#1a1a1a"];
                    };
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Background color of the text item.\nDefault: `#ffffff`.";
                        readonly examples: readonly ["#e6e6e6"];
                    };
                    readonly fillOpacity: {
                        readonly type: "string";
                        readonly description: "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided.";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly fontFamily: {
                        readonly type: "string";
                        readonly description: "Font type for the text in the text item.\nDefault: `arial`.";
                        readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Font size, in dp.\nDefault: `14`.";
                        readonly minimum: 1;
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Horizontal alignment for the item's content.\nDefault: `center.`";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content.";
                readonly properties: {
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.\nThe minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.\nFor example, if the font size of the `text` item is `14`, the minimum `width` is `24`.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly required: readonly ["data"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to create the item.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the text item.";
                            readonly examples: readonly ["Hello"];
                        };
                    };
                    readonly required: readonly ["content"];
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a text item, such as the fill color or font family.";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Background color of the text item.\nDefault: `#ffffff`.";
                            readonly examples: readonly ["#e6e6e6"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Font type for the text in the text item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Font size, in dp.\nDefault: `14`.";
                            readonly minimum: 1;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Horizontal alignment for the item's content.\nDefault: `center.`\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["text"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteAppCardItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete an item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteBoard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board that you want to delete.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteCardItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteConnector: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the connector.";
                };
                readonly connector_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the connector that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "connector_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteDocumentItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEmbedItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteImageItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteShapeItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteStickyNoteItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteTextItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAppCardItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains app card item data, such as the title, description, or fields.";
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the app card.";
                            readonly examples: readonly ["Sample app card description"];
                        };
                        readonly fields: {
                            readonly type: "array";
                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                readonly properties: {
                                    readonly fillColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                        readonly examples: readonly ["#2fa9e3"];
                                    };
                                    readonly iconShape: {
                                        readonly type: "string";
                                        readonly default: "round";
                                        readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                        readonly enum: readonly ["round", "square"];
                                    };
                                    readonly iconUrl: {
                                        readonly type: "string";
                                        readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                        readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                    };
                                    readonly textColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                        readonly examples: readonly ["#1a1a1a"];
                                    };
                                    readonly tooltip: {
                                        readonly type: "string";
                                        readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                        readonly examples: readonly ["Completion status indicator"];
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                        readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                        readonly examples: readonly ["Status: in progress"];
                                    };
                                };
                            };
                        };
                        readonly owned: {
                            readonly type: "boolean";
                            readonly description: "Defines whether the card is owned by the application making the call.";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                            readonly enum: readonly ["disconnected", "connected", "disabled"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the app card.";
                            readonly examples: readonly ["sample app card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of an app card item, such as the fill color.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["app_card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBoardMembers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board to which the board member belongs.";
                };
            };
            readonly required: readonly ["board_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "string";
                    readonly description: "The maximum number of board members to retrieve.\nDefault: `20`.";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly offset: {
                    readonly type: "string";
                    readonly description: "The (zero-based) offset of the first item in the collection to return.\nDefault: `0`.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly description: "Contains the result data.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier (ID) of the user.";
                                readonly examples: readonly ["3074457353169356300"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the user.";
                                readonly examples: readonly ["John Smith"];
                            };
                            readonly role: {
                                readonly type: "string";
                                readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                                readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                                readonly examples: readonly ["board_member"];
                            };
                        };
                        readonly required: readonly ["id", "name", "type"];
                    };
                };
                readonly total: {
                    readonly type: "integer";
                    readonly format: "int64";
                    readonly description: "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).";
                    readonly examples: readonly [1];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.";
                    readonly examples: readonly [1];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly offset: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.";
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n";
                    readonly examples: readonly [20];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains pagination links for the collection.";
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the first page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "Link to the retrieve information in the last page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="];
                        };
                        readonly next: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the next page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="];
                        };
                        readonly prev: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the previous page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the current page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBoards: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "string";
                    readonly description: "The team_id for which you want to retrieve the list of boards. If this parameter is sent in the request, the `query` and `owner` parameters are ignored.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly project_id: {
                    readonly type: "string";
                    readonly description: "The `project_id` for which you want to retrieve the list of boards.<br/>**Note:** Projects have been renamed to Spaces. Use this as the unique identifier (ID) of the space. If this parameter is included in the request, the `query` and `owner` parameters are ignored.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly query: {
                    readonly type: "string";
                    readonly description: "Retrieves a list of boards that contain the query string provided in the board name or board description. For example, if you want to retrieve a list of boards that have the word `beta` in the board name or description, add `beta` as the `query` parameter value. You can use the `query` parameter with the owner parameter to narrow down the board search results.";
                    readonly maxLength: 500;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly owner: {
                    readonly type: "string";
                    readonly description: "Retrieves a list of boards that belong to a specific owner ID. You must pass the owner ID (for example, 3074457353169356300), not the owner name. You can use the 'owner' parameter with the `query` parameter to narrow down the board search results. Note that if you pass the `team_id` in the same request, the `owner` parameter is ignored.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly limit: {
                    readonly type: "string";
                    readonly description: "The maximum number of boards to retrieve.\nDefault: `20`";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly offset: {
                    readonly type: "string";
                    readonly description: "The (zero-based) offset of the first item in the collection to return.\nDefault: `0`.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly default: "default";
                    readonly description: "Sort order in which you want to view the result set. Options `last_created` and `alphabetically` are applicable only when you search for boards by team.\n* `default` - If `team_id` is present, `last_created`. Otherwise, `last_opened`.\n* `last_modified` - sort by the date and time when the board was last modified.\n* `last_opened` - sort by the date and time when the board was last opened.\n* `last_created` - sort by the date and time when the board was created.\n* `alphabetically` - sort by the board name (alphabetically).";
                    readonly enum: readonly ["default", "last_modified", "last_opened", "last_created", "alphabetically"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly description: "Contains the result data.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the result data.";
                        readonly properties: {
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            };
                            readonly createdBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who created the board.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3074457353169356300"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the user.";
                                        readonly examples: readonly ["John Smith"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "type"];
                            };
                            readonly currentUserMembership: {
                                readonly type: "object";
                                readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3074457353169356300"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the user.";
                                        readonly examples: readonly ["John Smith"];
                                    };
                                    readonly role: {
                                        readonly type: "string";
                                        readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                                        readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                                        readonly examples: readonly ["board_member"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "type"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Description of the board.";
                                readonly examples: readonly ["Sample board description"];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier (ID) of the board.";
                                readonly examples: readonly ["uXjVOD6LSME="];
                            };
                            readonly lastOpenedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the board was last opened by any user. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            };
                            readonly lastOpenedBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who opened the board last.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3074457353169356300"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the user.";
                                        readonly examples: readonly ["John Smith"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                            };
                            readonly modifiedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            };
                            readonly modifiedBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who created the board.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3074457353169356300"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the user.";
                                        readonly examples: readonly ["John Smith"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "type"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the board.";
                                readonly examples: readonly ["Sample board name"];
                            };
                            readonly owner: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who created the board.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3074457353169356300"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the user.";
                                        readonly examples: readonly ["John Smith"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "type"];
                            };
                            readonly picture: {
                                readonly type: "object";
                                readonly description: "Contains information about the cover picture of the board.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly format: "int64";
                                        readonly description: "Unique identifier (ID) of the cover picture for the board.";
                                        readonly examples: readonly [3458764514006802400];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly imageURL: {
                                        readonly type: "string";
                                        readonly description: "URL of the cover picture of the board.";
                                        readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                                    };
                                };
                            };
                            readonly policy: {
                                readonly type: "object";
                                readonly description: "Defines the permissions policies and sharing policies for the board.";
                                readonly properties: {
                                    readonly permissionsPolicy: {
                                        readonly type: "object";
                                        readonly description: "Defines the permissions policies for the board.";
                                        readonly properties: {
                                            readonly collaborationToolsStartAccess: {
                                                readonly type: "string";
                                                readonly default: "all_editors";
                                                readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\n\n`all_editors` `board_owners_and_coowners`";
                                                readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                                            };
                                            readonly copyAccess: {
                                                readonly type: "string";
                                                readonly default: "anyone";
                                                readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\n\n`anyone` `team_members` `team_editors` `board_owner`";
                                                readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                                            };
                                            readonly sharingAccess: {
                                                readonly type: "string";
                                                readonly default: "team_members_with_editing_rights";
                                                readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\n\n`team_members_with_editing_rights` `owner_and_coowners`";
                                                readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                                            };
                                        };
                                    };
                                    readonly sharingPolicy: {
                                        readonly type: "object";
                                        readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                                        readonly properties: {
                                            readonly access: {
                                                readonly type: "string";
                                                readonly description: "Defines the public-level access to the board.\n\n`private` `view` `edit` `comment`";
                                                readonly enum: readonly ["private", "view", "edit", "comment"];
                                            };
                                            readonly inviteToAccountAndBoardLinkAccess: {
                                                readonly type: "string";
                                                readonly default: "no_access";
                                                readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\n\n`viewer` `commenter` `editor` `coowner` `owner` `guest` `no_access`";
                                                readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"];
                                            };
                                            readonly organizationAccess: {
                                                readonly type: "string";
                                                readonly default: "private";
                                                readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\n\n`private` `view` `comment` `edit`";
                                                readonly enum: readonly ["private", "view", "comment", "edit"];
                                            };
                                            readonly teamAccess: {
                                                readonly type: "string";
                                                readonly description: "Defines the team-level access to the board.\n\n`private` `view` `comment` `edit`";
                                                readonly enum: readonly ["private", "view", "comment", "edit"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly team: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly description: "Contains information about the team with which the board is associated.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "int64";
                                        readonly description: "Unique identifier (ID) of the team.";
                                        readonly examples: readonly ["3088887345710753000"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the team.";
                                        readonly examples: readonly ["Marketing team"];
                                    };
                                };
                            };
                            readonly project: {
                                readonly type: "object";
                                readonly description: "Contains information about the project with which the board is associated.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "int64";
                                        readonly description: "Unique identifier (ID) of the project.";
                                        readonly examples: readonly ["3088887345710756000"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of the object that is returned. In this case, type returns `board`.";
                                readonly examples: readonly ["board"];
                            };
                            readonly viewLink: {
                                readonly type: "string";
                                readonly description: "URL to view the board.";
                                readonly examples: readonly ["https://miro.com/app/board/uXjVOD6LSME="];
                            };
                        };
                        readonly required: readonly ["description", "id", "name", "type"];
                    };
                };
                readonly total: {
                    readonly type: "integer";
                    readonly format: "int64";
                    readonly description: "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).";
                    readonly examples: readonly [1];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.";
                    readonly examples: readonly [1];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly offset: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.";
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n";
                    readonly examples: readonly [20];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains pagination links for the collection.";
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the first page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "Link to the retrieve information in the last page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="];
                        };
                        readonly next: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the next page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="];
                        };
                        readonly prev: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the previous page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the current page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCardItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                    readonly properties: {
                        readonly assigneeId: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the card.";
                            readonly examples: readonly ["sample card description"];
                        };
                        readonly dueDate: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly default: "sample card item";
                            readonly description: "A short text header for the card.";
                            readonly examples: readonly ["sample card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a card item, such as the card theme.";
                    readonly properties: {
                        readonly cardTheme: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetConnector: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific connector.";
                };
                readonly connector_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the connector that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "connector_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Contains the result data.";
            readonly properties: {
                readonly captions: {
                    readonly type: "array";
                    readonly description: "Blocks of text you want to display on the connector.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the connector's caption data, such as content and its position.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                                readonly maxLength: 200;
                                readonly minLength: 0;
                                readonly examples: readonly ["<p>Caption text</p>"];
                            };
                            readonly position: {
                                readonly type: "string";
                                readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                                readonly examples: readonly ["50%"];
                            };
                            readonly textAlignVertical: {
                                readonly type: "string";
                                readonly description: "The vertical position of the text on the connector. Default: middle\n\n`top` `middle` `bottom`";
                                readonly enum: readonly ["top", "middle", "bottom"];
                            };
                        };
                        readonly required: readonly ["content"];
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly endItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of a connector.";
                    readonly examples: readonly ["3458764517517818867"];
                };
                readonly isSupported: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.";
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the current object.";
                    readonly properties: {
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain more information about the current object.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly shape: {
                    readonly type: "string";
                    readonly default: "curved";
                    readonly description: "The path type of the connector line, defines curvature. Default: curved.\n\n`straight` `elbowed` `curved`";
                    readonly enum: readonly ["straight", "elbowed", "curved"];
                };
                readonly startItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`";
                            readonly examples: readonly ["#9510ac"];
                        };
                        readonly endStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: stealth.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the captions on the connector. Default: 14";
                            readonly maximum: 288;
                            readonly minimum: 10;
                            readonly examples: readonly ["15"];
                        };
                        readonly startStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: none.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly strokeColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the color of the connector line. Default: #000000.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                        readonly strokeStyle: {
                            readonly type: "string";
                            readonly description: "The stroke pattern of the connector line. Default: normal.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly strokeWidth: {
                            readonly type: "string";
                            readonly description: "The thickness of the connector line, in dp. Default: 1.0.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                            readonly examples: readonly ["2.0"];
                        };
                        readonly textOrientation: {
                            readonly type: "string";
                            readonly description: "The captions orientation relatively to the connector line curvature. Default: aligned.\n\n`horizontal` `aligned`";
                            readonly enum: readonly ["horizontal", "aligned"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of board object that is returned.";
                };
            };
            readonly required: readonly ["id"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetConnectors: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a list of connectors.";
                };
            };
            readonly required: readonly ["board_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "string";
                    readonly default: "10";
                    readonly description: "The maximum number of results to return per call. If the number of connectors in the response is greater than the limit specified, the response returns the cursor parameter with a value.";
                    readonly maximum: 50;
                    readonly minimum: 10;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly description: "A cursor-paginated method returns a portion of the total set of results based on the limit specified and a `cursor` that points to the next portion of the results. To retrieve the next portion of the collection, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly description: "A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.";
                    readonly examples: readonly ["MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4="];
                };
                readonly data: {
                    readonly type: "array";
                    readonly description: "Contains the result data.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the result data.";
                        readonly properties: {
                            readonly captions: {
                                readonly type: "array";
                                readonly description: "Blocks of text you want to display on the connector.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Contains the connector's caption data, such as content and its position.";
                                    readonly properties: {
                                        readonly content: {
                                            readonly type: "string";
                                            readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                                            readonly maxLength: 200;
                                            readonly minLength: 0;
                                            readonly examples: readonly ["<p>Caption text</p>"];
                                        };
                                        readonly position: {
                                            readonly type: "string";
                                            readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                                            readonly examples: readonly ["50%"];
                                        };
                                        readonly textAlignVertical: {
                                            readonly type: "string";
                                            readonly description: "The vertical position of the text on the connector. Default: middle\n\n`top` `middle` `bottom`";
                                            readonly enum: readonly ["top", "middle", "bottom"];
                                        };
                                    };
                                    readonly required: readonly ["content"];
                                };
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                            };
                            readonly createdBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who created the item.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3458764517517852417"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                            };
                            readonly endItem: {
                                readonly type: "object";
                                readonly description: "The starting point of the connector.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                                        readonly examples: readonly ["3458764517517818867"];
                                    };
                                    readonly links: {
                                        readonly type: "object";
                                        readonly description: "Contains applicable links for the current object.";
                                        readonly properties: {
                                            readonly self: {
                                                readonly type: "string";
                                                readonly description: "Link to obtain more information about the current object.";
                                                readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                            };
                                        };
                                    };
                                    readonly position: {
                                        readonly type: "object";
                                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                                        readonly properties: {
                                            readonly x: {
                                                readonly type: "string";
                                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                                readonly examples: readonly ["50%"];
                                            };
                                            readonly y: {
                                                readonly type: "string";
                                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                                readonly examples: readonly ["0%"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier (ID) of a connector.";
                                readonly examples: readonly ["3458764517517818867"];
                            };
                            readonly isSupported: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.";
                            };
                            readonly links: {
                                readonly type: "object";
                                readonly description: "Contains applicable links for the current object.";
                                readonly properties: {
                                    readonly self: {
                                        readonly type: "string";
                                        readonly description: "Link to obtain more information about the current object.";
                                        readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                    };
                                };
                            };
                            readonly modifiedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                            };
                            readonly modifiedBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who last modified the item.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3458764517517852417"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                            };
                            readonly shape: {
                                readonly type: "string";
                                readonly default: "curved";
                                readonly description: "The path type of the connector line, defines curvature. Default: curved.\n\n`straight` `elbowed` `curved`";
                                readonly enum: readonly ["straight", "elbowed", "curved"];
                            };
                            readonly startItem: {
                                readonly type: "object";
                                readonly description: "The starting point of the connector.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                                        readonly examples: readonly ["3458764517517818867"];
                                    };
                                    readonly links: {
                                        readonly type: "object";
                                        readonly description: "Contains applicable links for the current object.";
                                        readonly properties: {
                                            readonly self: {
                                                readonly type: "string";
                                                readonly description: "Link to obtain more information about the current object.";
                                                readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                            };
                                        };
                                    };
                                    readonly position: {
                                        readonly type: "object";
                                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                                        readonly properties: {
                                            readonly x: {
                                                readonly type: "string";
                                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                                readonly examples: readonly ["50%"];
                                            };
                                            readonly y: {
                                                readonly type: "string";
                                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                                readonly examples: readonly ["0%"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly style: {
                                readonly type: "object";
                                readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                                readonly properties: {
                                    readonly color: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`";
                                        readonly examples: readonly ["#9510ac"];
                                    };
                                    readonly endStrokeCap: {
                                        readonly type: "string";
                                        readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: stealth.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                                    };
                                    readonly fontSize: {
                                        readonly type: "string";
                                        readonly description: "Defines the font size, in dp, for the captions on the connector. Default: 14";
                                        readonly maximum: 288;
                                        readonly minimum: 10;
                                        readonly examples: readonly ["15"];
                                    };
                                    readonly startStrokeCap: {
                                        readonly type: "string";
                                        readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: none.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                                    };
                                    readonly strokeColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value of the color of the connector line. Default: #000000.";
                                        readonly examples: readonly ["#2d9bf0"];
                                    };
                                    readonly strokeStyle: {
                                        readonly type: "string";
                                        readonly description: "The stroke pattern of the connector line. Default: normal.\n\n`normal` `dotted` `dashed`";
                                        readonly enum: readonly ["normal", "dotted", "dashed"];
                                    };
                                    readonly strokeWidth: {
                                        readonly type: "string";
                                        readonly description: "The thickness of the connector line, in dp. Default: 1.0.";
                                        readonly maximum: 24;
                                        readonly minimum: 1;
                                        readonly examples: readonly ["2.0"];
                                    };
                                    readonly textOrientation: {
                                        readonly type: "string";
                                        readonly description: "The captions orientation relatively to the connector line curvature. Default: aligned.\n\n`horizontal` `aligned`";
                                        readonly enum: readonly ["horizontal", "aligned"];
                                    };
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of board object that is returned.";
                            };
                        };
                        readonly required: readonly ["id"];
                    };
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.";
                    readonly examples: readonly [20];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains pagination links for the collection.";
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the first page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "Link to the retrieve information in the last page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="];
                        };
                        readonly next: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the next page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="];
                        };
                        readonly prev: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the previous page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the current page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="];
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.";
                    readonly examples: readonly [1];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly total: {
                    readonly type: "integer";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetDocumentItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly documentUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the document.";
                            readonly examples: readonly ["Sample document title"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["document"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetEmbedItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly contentType: {
                            readonly type: "string";
                            readonly description: "Type of the embedded item's content.";
                            readonly examples: readonly ["video"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Short description of the embedded item.";
                            readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                        };
                        readonly html: {
                            readonly type: "string";
                            readonly description: "Html code of the embedded item.";
                            readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                        };
                        readonly mode: {
                            readonly type: "string";
                            readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                            readonly enum: readonly ["inline", "modal"];
                        };
                        readonly previewUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly providerName: {
                            readonly type: "string";
                            readonly description: "Name of the content's provider.";
                            readonly examples: readonly ["YouTube"];
                        };
                        readonly providerUrl: {
                            readonly type: "string";
                            readonly description: "Url of the content's provider.";
                            readonly examples: readonly ["https://www.youtube.com/"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title of the embedded item.";
                            readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                            readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["embed"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetImageItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly imageUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the image.";
                            readonly examples: readonly ["Sample image title"];
                        };
                        readonly altText: {
                            readonly type: "string";
                            readonly description: "A description (alt-text) to help people understand what is depicted here.";
                            readonly examples: readonly ["Sample image alt text"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["image"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetItems: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board for which you want to retrieve the list of available items.";
                };
            };
            readonly required: readonly ["board_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "string";
                    readonly default: "10";
                    readonly description: "The maximum number of results to return per call. If the number of items in the response is greater than the limit specified, the response returns the cursor parameter with a value.";
                    readonly maximum: 50;
                    readonly minimum: 10;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["text", "shape", "sticky_note", "image", "document", "card", "app_card", "preview", "frame", "embed", "doc_format"];
                    readonly description: "If you want to get a list of items of a specific type, specify an item type. For example, if you want to retrieve the list of card items, set `type` to `cards`. A `document` is meant for uploaded  documents like PDFs while `doc_format` is a Miro structured document similar to a Google Doc.\n Possible values: `app_card`, `card`, `document`, `embed`, `frame`, `image`, `shape`, `sticky_note`, `text`, `doc_format`";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly description: "A cursor-paginated method returns a portion of the total set of results based on the limit specified and a `cursor` that points to the next portion of the results. To retrieve the next portion of the collection, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request.";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly description: "Contains the result data.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the result data.";
                        readonly properties: {
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                            };
                            readonly createdBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who created the item.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3458764517517852417"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly description: "Contains the item data, such as the item title, content, or description.";
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                                    readonly properties: {
                                        readonly content: {
                                            readonly type: "string";
                                            readonly description: "The actual text (content) that appears in the text item.";
                                            readonly examples: readonly ["Hello"];
                                        };
                                    };
                                    readonly required: readonly ["content"];
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly contentType: {
                                            readonly type: "string";
                                            readonly description: "Type of the embedded item's content.";
                                            readonly examples: readonly ["video"];
                                        };
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "Short description of the embedded item.";
                                            readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                                        };
                                        readonly html: {
                                            readonly type: "string";
                                            readonly description: "Html code of the embedded item.";
                                            readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                                        };
                                        readonly mode: {
                                            readonly type: "string";
                                            readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                                            readonly enum: readonly ["inline", "modal"];
                                        };
                                        readonly previewUrl: {
                                            readonly type: "string";
                                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                                        };
                                        readonly providerName: {
                                            readonly type: "string";
                                            readonly description: "Name of the content's provider.";
                                            readonly examples: readonly ["YouTube"];
                                        };
                                        readonly providerUrl: {
                                            readonly type: "string";
                                            readonly description: "Url of the content's provider.";
                                            readonly examples: readonly ["https://www.youtube.com/"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly description: "Title of the embedded item.";
                                            readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                                            readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                                    readonly properties: {
                                        readonly assigneeId: {
                                            readonly type: "string";
                                            readonly format: "int64";
                                            readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                                            readonly examples: readonly ["3074457362577955300"];
                                            readonly minimum: -9223372036854776000;
                                            readonly maximum: 9223372036854776000;
                                        };
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "A short text description to add context about the card.";
                                            readonly examples: readonly ["sample card description"];
                                        };
                                        readonly dueDate: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                            readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly default: "sample card item";
                                            readonly description: "A short text header for the card.";
                                            readonly examples: readonly ["sample card item"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Contains app card item data, such as the title, description, or fields.";
                                    readonly properties: {
                                        readonly description: {
                                            readonly type: "string";
                                            readonly description: "A short text description to add context about the app card.";
                                            readonly examples: readonly ["Sample app card description"];
                                        };
                                        readonly fields: {
                                            readonly type: "array";
                                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                                readonly properties: {
                                                    readonly fillColor: {
                                                        readonly type: "string";
                                                        readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                                        readonly examples: readonly ["#2fa9e3"];
                                                    };
                                                    readonly iconShape: {
                                                        readonly type: "string";
                                                        readonly default: "round";
                                                        readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                                        readonly enum: readonly ["round", "square"];
                                                    };
                                                    readonly iconUrl: {
                                                        readonly type: "string";
                                                        readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                                        readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                                    };
                                                    readonly textColor: {
                                                        readonly type: "string";
                                                        readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                                        readonly examples: readonly ["#1a1a1a"];
                                                    };
                                                    readonly tooltip: {
                                                        readonly type: "string";
                                                        readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                                        readonly examples: readonly ["Completion status indicator"];
                                                    };
                                                    readonly value: {
                                                        readonly type: "string";
                                                        readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                                        readonly examples: readonly ["Status: in progress"];
                                                    };
                                                };
                                            };
                                        };
                                        readonly owned: {
                                            readonly type: "boolean";
                                            readonly description: "Defines whether the card is owned by the application making the call.";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                                            readonly enum: readonly ["disconnected", "connected", "disabled"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly description: "A short text header to identify the app card.";
                                            readonly examples: readonly ["sample app card item"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly imageUrl: {
                                            readonly type: "string";
                                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly description: "A short text header to identify the image.";
                                            readonly examples: readonly ["Sample image title"];
                                        };
                                        readonly altText: {
                                            readonly type: "string";
                                            readonly description: "A description (alt-text) to help people understand what is depicted here.";
                                            readonly examples: readonly ["Sample image alt text"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly documentUrl: {
                                            readonly type: "string";
                                            readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly description: "A short text header to identify the document.";
                                            readonly examples: readonly ["Sample document title"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Contains shape item data, such as the content or the type of the shape.";
                                    readonly properties: {
                                        readonly content: {
                                            readonly type: "string";
                                            readonly description: "The text you want to display on the shape.";
                                            readonly examples: readonly ["Hello"];
                                        };
                                        readonly shape: {
                                            readonly type: "string";
                                            readonly default: "rectangle";
                                            readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                                            readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Contains frame item data, such as the title, frame type, or frame format.";
                                    readonly properties: {
                                        readonly format: {
                                            readonly type: "string";
                                            readonly default: "custom";
                                            readonly description: "Only custom frames are supported at the moment.\n\n`custom` `desktop` `phone` `tablet` `a4` `letter` `ratio_1x1` `ratio_4x3` `ratio_16x9`";
                                            readonly enum: readonly ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"];
                                        };
                                        readonly title: {
                                            readonly type: "string";
                                            readonly description: "Title of the frame. This title appears at the top of the frame.";
                                            readonly examples: readonly ["Sample frame title"];
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "freeform";
                                            readonly description: "Only free form frames are supported at the moment.\n\n`freeform` `heap` `grid` `rows` `columns` `unknown`";
                                            readonly enum: readonly ["freeform", "heap", "grid", "rows", "columns", "unknown"];
                                        };
                                        readonly showContent: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                            readonly description: "Hide or reveal the content inside a frame (Enterprise plan only).";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                                    readonly properties: {
                                        readonly content: {
                                            readonly type: "string";
                                            readonly description: "The actual text (content) that appears in the sticky note item.";
                                            readonly examples: readonly ["Hello"];
                                        };
                                        readonly shape: {
                                            readonly type: "string";
                                            readonly default: "square";
                                            readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                                            readonly enum: readonly ["square", "rectangle"];
                                        };
                                    };
                                }];
                            };
                            readonly geometry: {
                                readonly type: "object";
                                readonly description: "Contains geometrical information about the item, such as its width or height.";
                                readonly properties: {
                                    readonly height: {
                                        readonly type: "number";
                                        readonly format: "double";
                                        readonly description: "Height of the item, in pixels.";
                                        readonly examples: readonly [60];
                                        readonly minimum: -1.7976931348623157e+308;
                                        readonly maximum: 1.7976931348623157e+308;
                                    };
                                    readonly rotation: {
                                        readonly type: "number";
                                        readonly format: "double";
                                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                                        readonly minimum: -1.7976931348623157e+308;
                                        readonly maximum: 1.7976931348623157e+308;
                                    };
                                    readonly width: {
                                        readonly type: "number";
                                        readonly format: "double";
                                        readonly description: "Width of the item, in pixels.";
                                        readonly examples: readonly [320];
                                        readonly minimum: -1.7976931348623157e+308;
                                        readonly maximum: 1.7976931348623157e+308;
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier (ID) of an item.";
                                readonly examples: readonly ["3458764517517819000"];
                            };
                            readonly links: {
                                readonly type: "object";
                                readonly description: "Contains applicable links for the item.";
                                readonly properties: {
                                    readonly related: {
                                        readonly type: "string";
                                        readonly description: "Link to obtain information about the child items related to the frame.";
                                        readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                                    };
                                    readonly self: {
                                        readonly type: "string";
                                        readonly description: "Link to obtain information about the current item.";
                                        readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                                    };
                                };
                            };
                            readonly modifiedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                            };
                            readonly modifiedBy: {
                                readonly type: "object";
                                readonly description: "Contains information about the user who last modified the item.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the user.";
                                        readonly examples: readonly ["3458764517517852417"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                                        readonly examples: readonly ["user"];
                                    };
                                };
                            };
                            readonly parent: {
                                readonly type: "object";
                                readonly description: "Contains information about the parent frame for the item.";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "int64";
                                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                                        readonly examples: readonly ["3074457362577955300"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly links: {
                                        readonly type: "object";
                                        readonly description: "Contains applicable links for the current object.";
                                        readonly properties: {
                                            readonly self: {
                                                readonly type: "string";
                                                readonly description: "Link to obtain more information about the current object.";
                                                readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly position: {
                                readonly type: "object";
                                readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                                readonly properties: {
                                    readonly origin: {
                                        readonly type: "string";
                                        readonly default: "center";
                                        readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                                        readonly enum: readonly ["center"];
                                    };
                                    readonly relativeTo: {
                                        readonly type: "string";
                                        readonly enum: readonly ["canvas_center", "parent_top_left"];
                                        readonly description: "`canvas_center` `parent_top_left`";
                                    };
                                    readonly x: {
                                        readonly type: "number";
                                        readonly format: "double";
                                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                                        readonly examples: readonly [100];
                                        readonly minimum: -1.7976931348623157e+308;
                                        readonly maximum: 1.7976931348623157e+308;
                                    };
                                    readonly y: {
                                        readonly type: "number";
                                        readonly format: "double";
                                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                                        readonly examples: readonly [100];
                                        readonly minimum: -1.7976931348623157e+308;
                                        readonly maximum: 1.7976931348623157e+308;
                                    };
                                    readonly slotId: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                                        readonly examples: readonly ["123"];
                                    };
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of item that is returned.";
                                readonly examples: readonly ["sticky_note"];
                            };
                        };
                        readonly required: readonly ["id", "type"];
                    };
                };
                readonly total: {
                    readonly type: "integer";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.";
                    readonly examples: readonly [1];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly description: "A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.";
                    readonly examples: readonly ["MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4="];
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly description: "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.";
                    readonly examples: readonly [20];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains pagination links for the collection.";
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the first page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "Link to the retrieve information in the last page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="];
                        };
                        readonly next: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the next page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="];
                        };
                        readonly prev: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the previous page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to retrieve information in the current page of the collection.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetShapeItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains shape item data, such as the content or the type of the shape.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The text you want to display on the shape.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "rectangle";
                            readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                            readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the shape style, such as the border color or opacity.";
                    readonly properties: {
                        readonly borderColor: {
                            readonly type: "string";
                            readonly description: "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray).";
                        };
                        readonly borderOpacity: {
                            readonly type: "string";
                            readonly description: "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: If a value for `borderColor` is passed, the default value for `borderColor` is `1.0`. If a value for `borderColor` is not passed, the default value is `0.0`.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly borderStyle: {
                            readonly type: "string";
                            readonly description: "Defines the style used to represent the border of the shape.\nDefault: `normal`.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly borderWidth: {
                            readonly type: "string";
                            readonly description: "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                        };
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.";
                            readonly examples: readonly ["#8fd14f"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Defines the font type for the text in the shape item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.";
                            readonly maximum: 288;
                            readonly minimum: 10;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["shape"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSpecificBoard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the board.";
                    readonly examples: readonly ["uXjVOD6LSME="];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the board.";
                    readonly examples: readonly ["Sample board name"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the board.";
                    readonly examples: readonly ["Sample board description"];
                };
                readonly team: {
                    readonly required: readonly ["id", "name"];
                    readonly type: "object";
                    readonly description: "Contains information about the team with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the team.";
                            readonly examples: readonly ["3088887345710753000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the team.";
                            readonly examples: readonly ["Marketing team"];
                        };
                    };
                };
                readonly project: {
                    readonly type: "object";
                    readonly description: "Contains information about the project with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the project.";
                            readonly examples: readonly ["3088887345710756000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "Contains information about the cover picture of the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the cover picture for the board.";
                            readonly examples: readonly [3458764514006802400];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly imageURL: {
                            readonly type: "string";
                            readonly description: "URL of the cover picture of the board.";
                            readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                        };
                    };
                };
                readonly policy: {
                    readonly type: "object";
                    readonly description: "Defines the permissions policies and sharing policies for the board.";
                    readonly properties: {
                        readonly permissionsPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the permissions policies for the board.";
                            readonly properties: {
                                readonly collaborationToolsStartAccess: {
                                    readonly type: "string";
                                    readonly default: "all_editors";
                                    readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\n\n`all_editors` `board_owners_and_coowners`";
                                    readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                                };
                                readonly copyAccess: {
                                    readonly type: "string";
                                    readonly default: "anyone";
                                    readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\n\n`anyone` `team_members` `team_editors` `board_owner`";
                                    readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                                };
                                readonly sharingAccess: {
                                    readonly type: "string";
                                    readonly default: "team_members_with_editing_rights";
                                    readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\n\n`team_members_with_editing_rights` `owner_and_coowners`";
                                    readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                                };
                            };
                        };
                        readonly sharingPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                            readonly properties: {
                                readonly access: {
                                    readonly type: "string";
                                    readonly description: "Defines the public-level access to the board.\n\n`private` `view` `edit` `comment`";
                                    readonly enum: readonly ["private", "view", "edit", "comment"];
                                };
                                readonly inviteToAccountAndBoardLinkAccess: {
                                    readonly type: "string";
                                    readonly default: "no_access";
                                    readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\n\n`viewer` `commenter` `editor` `coowner` `owner` `guest` `no_access`";
                                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"];
                                };
                                readonly organizationAccess: {
                                    readonly type: "string";
                                    readonly default: "private";
                                    readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                                readonly teamAccess: {
                                    readonly type: "string";
                                    readonly description: "Defines the team-level access to the board.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                            };
                        };
                    };
                };
                readonly viewLink: {
                    readonly type: "string";
                    readonly description: "URL to view the board.";
                    readonly examples: readonly ["https://miro.com/app/board/uXjVOD6LSME="];
                };
                readonly owner: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly currentUserMembership: {
                    readonly type: "object";
                    readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                            readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                            readonly examples: readonly ["board_member"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly lastOpenedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was last opened by any user. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly lastOpenedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last opened the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the board.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the board members associated with the board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0"];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, type returns `board`.";
                    readonly examples: readonly ["board"];
                };
            };
            readonly required: readonly ["description", "id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSpecificBoardMember: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board to which the board member belongs.";
                };
                readonly board_member_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board member whose role you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "board_member_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the user.";
                    readonly examples: readonly ["3074457353169356300"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the user.";
                    readonly examples: readonly ["John Smith"];
                };
                readonly role: {
                    readonly type: "string";
                    readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the current object.";
                    readonly properties: {
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain more information about the current object.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                    readonly examples: readonly ["board_member"];
                };
            };
            readonly required: readonly ["id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSpecificItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Contains the result data.";
            readonly properties: {
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains the item data, such as the item title, content, or description.";
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The actual text (content) that appears in the text item.";
                                readonly examples: readonly ["Hello"];
                            };
                        };
                        readonly required: readonly ["content"];
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly contentType: {
                                readonly type: "string";
                                readonly description: "Type of the embedded item's content.";
                                readonly examples: readonly ["video"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Short description of the embedded item.";
                                readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                            };
                            readonly html: {
                                readonly type: "string";
                                readonly description: "Html code of the embedded item.";
                                readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                            };
                            readonly mode: {
                                readonly type: "string";
                                readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                                readonly enum: readonly ["inline", "modal"];
                            };
                            readonly previewUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                            };
                            readonly providerName: {
                                readonly type: "string";
                                readonly description: "Name of the content's provider.";
                                readonly examples: readonly ["YouTube"];
                            };
                            readonly providerUrl: {
                                readonly type: "string";
                                readonly description: "Url of the content's provider.";
                                readonly examples: readonly ["https://www.youtube.com/"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "Title of the embedded item.";
                                readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                                readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                        readonly properties: {
                            readonly assigneeId: {
                                readonly type: "string";
                                readonly format: "int64";
                                readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                                readonly examples: readonly ["3074457362577955300"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "A short text description to add context about the card.";
                                readonly examples: readonly ["sample card description"];
                            };
                            readonly dueDate: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly default: "sample card item";
                                readonly description: "A short text header for the card.";
                                readonly examples: readonly ["sample card item"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains app card item data, such as the title, description, or fields.";
                        readonly properties: {
                            readonly description: {
                                readonly type: "string";
                                readonly description: "A short text description to add context about the app card.";
                                readonly examples: readonly ["Sample app card description"];
                            };
                            readonly fields: {
                                readonly type: "array";
                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                    readonly properties: {
                                        readonly fillColor: {
                                            readonly type: "string";
                                            readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                            readonly examples: readonly ["#2fa9e3"];
                                        };
                                        readonly iconShape: {
                                            readonly type: "string";
                                            readonly default: "round";
                                            readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                            readonly enum: readonly ["round", "square"];
                                        };
                                        readonly iconUrl: {
                                            readonly type: "string";
                                            readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                            readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                        };
                                        readonly textColor: {
                                            readonly type: "string";
                                            readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                            readonly examples: readonly ["#1a1a1a"];
                                        };
                                        readonly tooltip: {
                                            readonly type: "string";
                                            readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                            readonly examples: readonly ["Completion status indicator"];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                            readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                            readonly examples: readonly ["Status: in progress"];
                                        };
                                    };
                                };
                            };
                            readonly owned: {
                                readonly type: "boolean";
                                readonly description: "Defines whether the card is owned by the application making the call.";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                                readonly enum: readonly ["disconnected", "connected", "disabled"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the app card.";
                                readonly examples: readonly ["sample app card item"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly imageUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the image.";
                                readonly examples: readonly ["Sample image title"];
                            };
                            readonly altText: {
                                readonly type: "string";
                                readonly description: "A description (alt-text) to help people understand what is depicted here.";
                                readonly examples: readonly ["Sample image alt text"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly documentUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the document.";
                                readonly examples: readonly ["Sample document title"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains shape item data, such as the content or the type of the shape.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The text you want to display on the shape.";
                                readonly examples: readonly ["Hello"];
                            };
                            readonly shape: {
                                readonly type: "string";
                                readonly default: "rectangle";
                                readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                                readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains frame item data, such as the title, frame type, or frame format.";
                        readonly properties: {
                            readonly format: {
                                readonly type: "string";
                                readonly default: "custom";
                                readonly description: "Only custom frames are supported at the moment.\n\n`custom` `desktop` `phone` `tablet` `a4` `letter` `ratio_1x1` `ratio_4x3` `ratio_16x9`";
                                readonly enum: readonly ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "Title of the frame. This title appears at the top of the frame.";
                                readonly examples: readonly ["Sample frame title"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "freeform";
                                readonly description: "Only free form frames are supported at the moment.\n\n`freeform` `heap` `grid` `rows` `columns` `unknown`";
                                readonly enum: readonly ["freeform", "heap", "grid", "rows", "columns", "unknown"];
                            };
                            readonly showContent: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Hide or reveal the content inside a frame (Enterprise plan only).";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The actual text (content) that appears in the sticky note item.";
                                readonly examples: readonly ["Hello"];
                            };
                            readonly shape: {
                                readonly type: "string";
                                readonly default: "square";
                                readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                                readonly enum: readonly ["square", "rectangle"];
                            };
                        };
                    }];
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["sticky_note"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetStickyNoteItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the sticky note item.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "square";
                            readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                            readonly enum: readonly ["square", "rectangle"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a sticky note item, such as the fill color or text alignment.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the sticky note.\nDefault: `light_yellow`.\n\n`gray` `light_yellow` `yellow` `orange` `light_green` `green` `dark_green` `cyan` `light_pink` `pink` `violet` `red` `light_blue` `blue` `dark_blue` `black`";
                            readonly enum: readonly ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"];
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["sticky_note"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetTextItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to retrieve a specific item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to retrieve.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the text item.";
                            readonly examples: readonly ["Hello"];
                        };
                    };
                    readonly required: readonly ["content"];
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a text item, such as the fill color or font family.";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Background color of the text item.\nDefault: `#ffffff`.";
                            readonly examples: readonly ["#e6e6e6"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Font type for the text in the text item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Font size, in dp.\nDefault: `14`.";
                            readonly minimum: 1;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Horizontal alignment for the item's content.\nDefault: `center.`\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["text"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RemoveBoardMember: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board from which you want to delete an item.";
                };
                readonly board_member_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board member whose role you want to delete.";
                };
            };
            readonly required: readonly ["board_id", "board_member_id"];
        }];
    };
    readonly response: {
        readonly "204": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ShareBoard: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly emails: {
                readonly type: "array";
                readonly description: "Email IDs of the users you want to invite to the board. You can invite up to 20 members per call.";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Email IDs of the users you want to invite to the board. You can invite up to 20 members per call.";
                    readonly examples: readonly ["member@email.com"];
                };
                readonly maxItems: 20;
                readonly minItems: 1;
            };
            readonly role: {
                readonly type: "string";
                readonly default: "commenter";
                readonly description: "Role of the board member. Inviting users with the role `owner` has the same effect as the role `coowner`.";
                readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
            };
            readonly message: {
                readonly type: "string";
                readonly description: "The message that will be sent in the invitation email.";
                readonly examples: readonly ["Hey there! Join my board and let's collaborate on this project!"];
            };
        };
        readonly required: readonly ["emails"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board to which the board member belongs.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly failed: {
                    readonly type: "array";
                    readonly description: "Contains information about the invites that failed.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains information about the invites that failed.";
                        readonly properties: {
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Email ID for which the invitation failed.";
                                readonly examples: readonly ["john.smith.demo@miro.com"];
                            };
                            readonly reason: {
                                readonly type: "string";
                                readonly description: "Reason why the invitation failed.";
                                readonly examples: readonly ["INVITATION_FAILED"];
                            };
                        };
                    };
                };
                readonly successful: {
                    readonly type: "array";
                    readonly description: "Contains information about the invites that were successfully sent.";
                    readonly items: {
                        readonly type: "integer";
                        readonly format: "int64";
                        readonly description: "Contains information about the invites that were successfully sent.";
                        readonly examples: readonly [3074457350804038700];
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                    readonly examples: readonly [3074457350804038700];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateAppCardItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains app card item data, such as the title, description, or fields.";
                readonly properties: {
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A short text description to add context about the app card.";
                        readonly examples: readonly ["Sample app card description"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                            readonly properties: {
                                readonly fillColor: {
                                    readonly type: "string";
                                    readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                    readonly examples: readonly ["#2fa9e3"];
                                };
                                readonly iconShape: {
                                    readonly type: "string";
                                    readonly default: "round";
                                    readonly description: "The shape of the icon on the preview field.";
                                    readonly enum: readonly ["round", "square"];
                                };
                                readonly iconUrl: {
                                    readonly type: "string";
                                    readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                    readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                };
                                readonly textColor: {
                                    readonly type: "string";
                                    readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                    readonly examples: readonly ["#1a1a1a"];
                                };
                                readonly tooltip: {
                                    readonly type: "string";
                                    readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                    readonly examples: readonly ["Completion status indicator"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                    readonly examples: readonly ["Status: in progress"];
                                };
                            };
                        };
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly default: "disconnected";
                        readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.";
                        readonly enum: readonly ["disconnected", "connected", "disabled"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly default: "sample app card item";
                        readonly description: "A short text header to identify the app card.";
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of an app card item, such as the fill color.";
                readonly properties: {
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Hex value of the border color of the app card.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains app card item data, such as the title, description, or fields.";
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the app card.";
                            readonly examples: readonly ["Sample app card description"];
                        };
                        readonly fields: {
                            readonly type: "array";
                            readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                readonly properties: {
                                    readonly fillColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                        readonly examples: readonly ["#2fa9e3"];
                                    };
                                    readonly iconShape: {
                                        readonly type: "string";
                                        readonly default: "round";
                                        readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                        readonly enum: readonly ["round", "square"];
                                    };
                                    readonly iconUrl: {
                                        readonly type: "string";
                                        readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                        readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                    };
                                    readonly textColor: {
                                        readonly type: "string";
                                        readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                        readonly examples: readonly ["#1a1a1a"];
                                    };
                                    readonly tooltip: {
                                        readonly type: "string";
                                        readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                        readonly examples: readonly ["Completion status indicator"];
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                        readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                        readonly examples: readonly ["Status: in progress"];
                                    };
                                };
                            };
                        };
                        readonly owned: {
                            readonly type: "boolean";
                            readonly description: "Defines whether the card is owned by the application making the call.";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                            readonly enum: readonly ["disconnected", "connected", "disabled"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the app card.";
                            readonly examples: readonly ["sample app card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of an app card item, such as the fill color.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["app_card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateBoard: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the board.";
                readonly maxLength: 300;
                readonly minLength: 0;
            };
            readonly name: {
                readonly type: "string";
                readonly default: "Untitled";
                readonly description: "Name for the board.";
                readonly maxLength: 60;
                readonly minLength: 1;
            };
            readonly policy: {
                readonly type: "object";
                readonly description: "Defines the permissions policies and sharing policies for the board.";
                readonly properties: {
                    readonly permissionsPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the permissions policies for the board.";
                        readonly properties: {
                            readonly collaborationToolsStartAccess: {
                                readonly type: "string";
                                readonly default: "all_editors";
                                readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                            };
                            readonly copyAccess: {
                                readonly type: "string";
                                readonly default: "anyone";
                                readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.";
                                readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                            };
                            readonly sharingAccess: {
                                readonly type: "string";
                                readonly default: "team_members_with_editing_rights";
                                readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.";
                                readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                            };
                        };
                    };
                    readonly sharingPolicy: {
                        readonly type: "object";
                        readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                        readonly properties: {
                            readonly access: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the public-level access to the board.";
                                readonly enum: readonly ["private", "view", "edit", "comment"];
                            };
                            readonly inviteToAccountAndBoardLinkAccess: {
                                readonly type: "string";
                                readonly default: "no_access";
                                readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.";
                                readonly enum: readonly ["viewer", "commenter", "editor", "no_access"];
                            };
                            readonly organizationAccess: {
                                readonly type: "string";
                                readonly default: "private";
                                readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                            readonly teamAccess: {
                                readonly type: "string";
                                readonly description: "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.";
                                readonly enum: readonly ["private", "view", "comment", "edit"];
                            };
                        };
                    };
                };
            };
            readonly teamId: {
                readonly type: "string";
                readonly description: "Unique identifier (ID) of the team where the board must be placed.\n\n**Note**: On Enterprise plan, boards can be moved via API by Board Owners, Co-Owners, and Content Admins. This behavior differs from the Miro UI, where only Board Owners can move boards. This difference is **intentional** and works as designed. On non-Enterprise plans, only Board Owners can move boards between teams—both via the API and the Miro UI.";
            };
            readonly projectId: {
                readonly type: "string";
                readonly description: "Unique identifier (ID) of the project to which the board must be added.\n\n**Note**: Projects have been renamed to Spaces. Use this parameter to update the space.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board that you want to update.";
                };
            };
            readonly required: readonly ["board_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the board.";
                    readonly examples: readonly ["uXjVOD6LSME="];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the board.";
                    readonly examples: readonly ["Sample board name"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the board.";
                    readonly examples: readonly ["Sample board description"];
                };
                readonly team: {
                    readonly required: readonly ["id", "name"];
                    readonly type: "object";
                    readonly description: "Contains information about the team with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the team.";
                            readonly examples: readonly ["3088887345710753000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the team.";
                            readonly examples: readonly ["Marketing team"];
                        };
                    };
                };
                readonly project: {
                    readonly type: "object";
                    readonly description: "Contains information about the project with which the board is associated.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the project.";
                            readonly examples: readonly ["3088887345710756000"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "Contains information about the cover picture of the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the cover picture for the board.";
                            readonly examples: readonly [3458764514006802400];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly imageURL: {
                            readonly type: "string";
                            readonly description: "URL of the cover picture of the board.";
                            readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                        };
                    };
                };
                readonly policy: {
                    readonly type: "object";
                    readonly description: "Defines the permissions policies and sharing policies for the board.";
                    readonly properties: {
                        readonly permissionsPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the permissions policies for the board.";
                            readonly properties: {
                                readonly collaborationToolsStartAccess: {
                                    readonly type: "string";
                                    readonly default: "all_editors";
                                    readonly description: "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\n\n`all_editors` `board_owners_and_coowners`";
                                    readonly enum: readonly ["all_editors", "board_owners_and_coowners"];
                                };
                                readonly copyAccess: {
                                    readonly type: "string";
                                    readonly default: "anyone";
                                    readonly description: "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\n\n`anyone` `team_members` `team_editors` `board_owner`";
                                    readonly enum: readonly ["anyone", "team_members", "team_editors", "board_owner"];
                                };
                                readonly sharingAccess: {
                                    readonly type: "string";
                                    readonly default: "team_members_with_editing_rights";
                                    readonly description: "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\n\n`team_members_with_editing_rights` `owner_and_coowners`";
                                    readonly enum: readonly ["team_members_with_editing_rights", "owner_and_coowners"];
                                };
                            };
                        };
                        readonly sharingPolicy: {
                            readonly type: "object";
                            readonly description: "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.";
                            readonly properties: {
                                readonly access: {
                                    readonly type: "string";
                                    readonly description: "Defines the public-level access to the board.\n\n`private` `view` `edit` `comment`";
                                    readonly enum: readonly ["private", "view", "edit", "comment"];
                                };
                                readonly inviteToAccountAndBoardLinkAccess: {
                                    readonly type: "string";
                                    readonly default: "no_access";
                                    readonly description: "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\n\n`viewer` `commenter` `editor` `coowner` `owner` `guest` `no_access`";
                                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"];
                                };
                                readonly organizationAccess: {
                                    readonly type: "string";
                                    readonly default: "private";
                                    readonly description: "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                                readonly teamAccess: {
                                    readonly type: "string";
                                    readonly description: "Defines the team-level access to the board.\n\n`private` `view` `comment` `edit`";
                                    readonly enum: readonly ["private", "view", "comment", "edit"];
                                };
                            };
                        };
                    };
                };
                readonly viewLink: {
                    readonly type: "string";
                    readonly description: "URL to view the board.";
                    readonly examples: readonly ["https://miro.com/app/board/uXjVOD6LSME="];
                };
                readonly owner: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly currentUserMembership: {
                    readonly type: "object";
                    readonly description: "Contains the current user's board membership details. The current user could be different from the board owner.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                            readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                            readonly examples: readonly ["board_member"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the board.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3074457353169356300"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the user.";
                            readonly examples: readonly ["John Smith"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                    readonly required: readonly ["id", "name", "type"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the board.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the board members associated with the board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0"];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current board.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_k1JKioQ="];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, type returns `board`.";
                    readonly examples: readonly ["board"];
                };
            };
            readonly required: readonly ["description", "id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateBoardMember: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly role: {
                readonly type: "string";
                readonly default: "commenter";
                readonly description: "Role of the board member.";
                readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board for which you want to update the role of the board member.";
                };
                readonly board_member_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board member whose role you want to update.";
                };
            };
            readonly required: readonly ["board_id", "board_member_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of the user.";
                    readonly examples: readonly ["3074457353169356300"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the user.";
                    readonly examples: readonly ["John Smith"];
                };
                readonly role: {
                    readonly type: "string";
                    readonly description: "Role of the board member.\n\n`viewer` `commenter` `editor` `coowner` `owner`";
                    readonly enum: readonly ["viewer", "commenter", "editor", "coowner", "owner"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the current object.";
                    readonly properties: {
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain more information about the current object.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object that is returned. In this case, `type` returns `board_member`.";
                    readonly examples: readonly ["board_member"];
                };
            };
            readonly required: readonly ["id", "name", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateCardItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                readonly properties: {
                    readonly assigneeId: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                        readonly examples: readonly ["3074457362577955300"];
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A short text description to add context about the card.";
                        readonly examples: readonly ["sample card description"];
                    };
                    readonly dueDate: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                        readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly default: "sample card item";
                        readonly description: "A short text header for the card.";
                        readonly examples: readonly ["sample card item"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a card item, such as the card theme.";
                readonly properties: {
                    readonly cardTheme: {
                        readonly type: "string";
                        readonly description: "Hex value of the border color of the card.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                    readonly properties: {
                        readonly assigneeId: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "A short text description to add context about the card.";
                            readonly examples: readonly ["sample card description"];
                        };
                        readonly dueDate: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                            readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly default: "sample card item";
                            readonly description: "A short text header for the card.";
                            readonly examples: readonly ["sample card item"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a card item, such as the card theme.";
                    readonly properties: {
                        readonly cardTheme: {
                            readonly type: "string";
                            readonly description: "Hex value of the border color of the card.\nDefault: `#2d9bf0`.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["card"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateConnector: {
    readonly body: {
        readonly type: "object";
        readonly description: "If both are provided, startItem.id must be different from endItem.id";
        readonly properties: {
            readonly startItem: {
                readonly type: "object";
                readonly description: "The ending point of the connector. If startItem is also provided, endItem.id must be different from startItem.id";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.";
                        readonly examples: readonly ["3458764517517818867"];
                    };
                    readonly position: {
                        readonly type: "object";
                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                        readonly properties: {
                            readonly x: {
                                readonly type: "string";
                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["50%"];
                            };
                            readonly y: {
                                readonly type: "string";
                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["0%"];
                            };
                        };
                    };
                    readonly snapTo: {
                        readonly type: "string";
                        readonly description: "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.";
                        readonly enum: readonly ["auto", "top", "right", "bottom", "left"];
                    };
                };
            };
            readonly endItem: {
                readonly type: "object";
                readonly description: "The ending point of the connector. If startItem is also provided, endItem.id must be different from startItem.id";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.";
                        readonly examples: readonly ["3458764517517818867"];
                    };
                    readonly position: {
                        readonly type: "object";
                        readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                        readonly properties: {
                            readonly x: {
                                readonly type: "string";
                                readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["50%"];
                            };
                            readonly y: {
                                readonly type: "string";
                                readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                readonly examples: readonly ["0%"];
                            };
                        };
                    };
                    readonly snapTo: {
                        readonly type: "string";
                        readonly description: "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.";
                        readonly enum: readonly ["auto", "top", "right", "bottom", "left"];
                    };
                };
            };
            readonly shape: {
                readonly type: "string";
                readonly description: "The path type of the connector line, defines curvature. Default: curved.";
                readonly enum: readonly ["straight", "elbowed", "curved"];
            };
            readonly captions: {
                readonly type: "array";
                readonly description: "Blocks of text you want to display on the connector.";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Contains the connector's caption data, such as content and its position.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                            readonly maxLength: 200;
                            readonly minLength: 0;
                            readonly examples: readonly ["<p>Caption text</p>"];
                        };
                        readonly position: {
                            readonly type: "string";
                            readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                            readonly examples: readonly ["50%"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "The vertical position of the text on the connector. Default: middle";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                    readonly required: readonly ["content"];
                };
                readonly maxItems: 20;
                readonly maxLength: 20;
                readonly minItems: 0;
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                readonly properties: {
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the captions on the connector.";
                        readonly examples: readonly ["#9510ac"];
                    };
                    readonly endStrokeCap: {
                        readonly type: "string";
                        readonly description: "The decoration cap of the connector end, like an arrow or circle.";
                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Defines the font size, in dp, for the captions on the connector.";
                        readonly maximum: 288;
                        readonly minimum: 10;
                        readonly examples: readonly ["15"];
                    };
                    readonly startStrokeCap: {
                        readonly type: "string";
                        readonly description: "The decoration cap of the connector end, like an arrow or circle.";
                        readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                    };
                    readonly strokeColor: {
                        readonly type: "string";
                        readonly description: "Hex value of the color of the connector line.";
                        readonly examples: readonly ["#2d9bf0"];
                    };
                    readonly strokeStyle: {
                        readonly type: "string";
                        readonly description: "The stroke pattern of the connector line.";
                        readonly enum: readonly ["normal", "dotted", "dashed"];
                    };
                    readonly strokeWidth: {
                        readonly type: "string";
                        readonly description: "The thickness of the connector line, in dp.";
                        readonly maximum: 24;
                        readonly minimum: 1;
                        readonly examples: readonly ["2.0"];
                    };
                    readonly textOrientation: {
                        readonly type: "string";
                        readonly description: "The captions orientation relatively to the connector line curvature.";
                        readonly enum: readonly ["horizontal", "aligned"];
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board for which you want to update the connector.";
                };
                readonly connector_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the connector that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "connector_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Contains the result data.";
            readonly properties: {
                readonly captions: {
                    readonly type: "array";
                    readonly description: "Blocks of text you want to display on the connector.";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Contains the connector's caption data, such as content and its position.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The text you want to display on the connector. Supports inline HTML tags.";
                                readonly maxLength: 200;
                                readonly minLength: 0;
                                readonly examples: readonly ["<p>Caption text</p>"];
                            };
                            readonly position: {
                                readonly type: "string";
                                readonly description: "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%";
                                readonly examples: readonly ["50%"];
                            };
                            readonly textAlignVertical: {
                                readonly type: "string";
                                readonly description: "The vertical position of the text on the connector. Default: middle\n\n`top` `middle` `bottom`";
                                readonly enum: readonly ["top", "middle", "bottom"];
                            };
                        };
                        readonly required: readonly ["content"];
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly endItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of a connector.";
                    readonly examples: readonly ["3458764517517818867"];
                };
                readonly isSupported: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas.";
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the current object.";
                    readonly properties: {
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain more information about the current object.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly shape: {
                    readonly type: "string";
                    readonly default: "curved";
                    readonly description: "The path type of the connector line, defines curvature. Default: curved.\n\n`straight` `elbowed` `curved`";
                    readonly enum: readonly ["straight", "elbowed", "curved"];
                };
                readonly startItem: {
                    readonly type: "object";
                    readonly description: "The starting point of the connector.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the item the connector is attached to.";
                            readonly examples: readonly ["3458764517517818867"];
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly description: "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "string";
                                    readonly description: "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["50%"];
                                };
                                readonly y: {
                                    readonly type: "string";
                                    readonly description: "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.";
                                    readonly examples: readonly ["0%"];
                                };
                            };
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a connector, such as the color or caption font size";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`";
                            readonly examples: readonly ["#9510ac"];
                        };
                        readonly endStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: stealth.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the captions on the connector. Default: 14";
                            readonly maximum: 288;
                            readonly minimum: 10;
                            readonly examples: readonly ["15"];
                        };
                        readonly startStrokeCap: {
                            readonly type: "string";
                            readonly description: "The decoration cap of the connector end, like an arrow or circle. Default: none.\n\n`none` `stealth` `rounded_stealth` `diamond` `filled_diamond` `oval` `filled_oval` `arrow` `triangle` `filled_triangle` `erd_one` `erd_many` `erd_only_one` `erd_zero_or_one` `erd_one_or_many` `erd_zero_or_many` `unknown`";
                            readonly enum: readonly ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"];
                        };
                        readonly strokeColor: {
                            readonly type: "string";
                            readonly description: "Hex value of the color of the connector line. Default: #000000.";
                            readonly examples: readonly ["#2d9bf0"];
                        };
                        readonly strokeStyle: {
                            readonly type: "string";
                            readonly description: "The stroke pattern of the connector line. Default: normal.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly strokeWidth: {
                            readonly type: "string";
                            readonly description: "The thickness of the connector line, in dp. Default: 1.0.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                            readonly examples: readonly ["2.0"];
                        };
                        readonly textOrientation: {
                            readonly type: "string";
                            readonly description: "The captions orientation relatively to the connector line curvature. Default: aligned.\n\n`horizontal` `aligned`";
                            readonly enum: readonly ["horizontal", "aligned"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of board object that is returned.";
                };
            };
            readonly required: readonly ["id"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateDocumentItemUsingUrl: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the document URL.";
                readonly properties: {
                    readonly title: {
                        readonly type: "string";
                        readonly description: "A short text header to identify the document.";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "URL where the document is hosted.";
                        readonly examples: readonly ["https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly documentUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the document.";
                            readonly examples: readonly ["Sample document title"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["document"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEmbedItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the embed URL.";
                readonly properties: {
                    readonly mode: {
                        readonly type: "string";
                        readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.";
                        readonly enum: readonly ["inline", "modal"];
                    };
                    readonly previewUrl: {
                        readonly type: "string";
                        readonly description: "URL of the image to be used as the preview image for the embedded item.";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                        readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly contentType: {
                            readonly type: "string";
                            readonly description: "Type of the embedded item's content.";
                            readonly examples: readonly ["video"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Short description of the embedded item.";
                            readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                        };
                        readonly html: {
                            readonly type: "string";
                            readonly description: "Html code of the embedded item.";
                            readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                        };
                        readonly mode: {
                            readonly type: "string";
                            readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                            readonly enum: readonly ["inline", "modal"];
                        };
                        readonly previewUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly providerName: {
                            readonly type: "string";
                            readonly description: "Name of the content's provider.";
                            readonly examples: readonly ["YouTube"];
                        };
                        readonly providerUrl: {
                            readonly type: "string";
                            readonly description: "Url of the content's provider.";
                            readonly examples: readonly ["https://www.youtube.com/"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title of the embedded item.";
                            readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                            readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["embed"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateImageItemUsingUrl: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains information about the image URL.";
                readonly properties: {
                    readonly title: {
                        readonly type: "string";
                        readonly description: "A short text header to identify the image.";
                        readonly examples: readonly ["Test image title"];
                    };
                    readonly altText: {
                        readonly type: "string";
                        readonly description: "A description (alt-text) to help people understand what is depicted here.";
                        readonly examples: readonly ["Sample image alt text"];
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "URL of the image.";
                        readonly examples: readonly ["https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly imageUrl: {
                            readonly type: "string";
                            readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                            readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "A short text header to identify the image.";
                            readonly examples: readonly ["Sample image title"];
                        };
                        readonly altText: {
                            readonly type: "string";
                            readonly description: "A description (alt-text) to help people understand what is depicted here.";
                            readonly examples: readonly ["Sample image alt text"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["image"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateItemPositionOrParent: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Contains the result data.";
            readonly properties: {
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains the item data, such as the item title, content, or description.";
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The actual text (content) that appears in the text item.";
                                readonly examples: readonly ["Hello"];
                            };
                        };
                        readonly required: readonly ["content"];
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly contentType: {
                                readonly type: "string";
                                readonly description: "Type of the embedded item's content.";
                                readonly examples: readonly ["video"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Short description of the embedded item.";
                                readonly examples: readonly ["So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."];
                            };
                            readonly html: {
                                readonly type: "string";
                                readonly description: "Html code of the embedded item.";
                                readonly examples: readonly ["<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"];
                            };
                            readonly mode: {
                                readonly type: "string";
                                readonly description: "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\n\n`inline` `modal`";
                                readonly enum: readonly ["inline", "modal"];
                            };
                            readonly previewUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                            };
                            readonly providerName: {
                                readonly type: "string";
                                readonly description: "Name of the content's provider.";
                                readonly examples: readonly ["YouTube"];
                            };
                            readonly providerUrl: {
                                readonly type: "string";
                                readonly description: "Url of the content's provider.";
                                readonly examples: readonly ["https://www.youtube.com/"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "Title of the embedded item.";
                                readonly examples: readonly ["HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour"];
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.";
                                readonly examples: readonly ["https://www.youtube.com/watch?v=HlVSNEiFCBk"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains card item data, such as the title, description, due date, or assignee ID.";
                        readonly properties: {
                            readonly assigneeId: {
                                readonly type: "string";
                                readonly format: "int64";
                                readonly description: "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.";
                                readonly examples: readonly ["3074457362577955300"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "A short text description to add context about the card.";
                                readonly examples: readonly ["sample card description"];
                            };
                            readonly dueDate: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                                readonly examples: readonly ["2023-10-12T22:00:55.000Z"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly default: "sample card item";
                                readonly description: "A short text header for the card.";
                                readonly examples: readonly ["sample card item"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains app card item data, such as the title, description, or fields.";
                        readonly properties: {
                            readonly description: {
                                readonly type: "string";
                                readonly description: "A short text description to add context about the app card.";
                                readonly examples: readonly ["Sample app card description"];
                            };
                            readonly fields: {
                                readonly type: "array";
                                readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.";
                                    readonly properties: {
                                        readonly fillColor: {
                                            readonly type: "string";
                                            readonly description: "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.";
                                            readonly examples: readonly ["#2fa9e3"];
                                        };
                                        readonly iconShape: {
                                            readonly type: "string";
                                            readonly default: "round";
                                            readonly description: "The shape of the icon on the preview field.\n\n`round` `square`";
                                            readonly enum: readonly ["round", "square"];
                                        };
                                        readonly iconUrl: {
                                            readonly type: "string";
                                            readonly description: "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.";
                                            readonly examples: readonly ["https://cdn-icons-png.flaticon.com/512/5695/5695864.png"];
                                        };
                                        readonly textColor: {
                                            readonly type: "string";
                                            readonly description: "Hex value representing the color of the text string assigned to `value`.";
                                            readonly examples: readonly ["#1a1a1a"];
                                        };
                                        readonly tooltip: {
                                            readonly type: "string";
                                            readonly description: "A short text displayed in a tooltip when clicking or hovering over the preview field.";
                                            readonly examples: readonly ["Completion status indicator"];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                            readonly description: "The actual data value of the custom field.\nIt can be any type of information that you want to convey.";
                                            readonly examples: readonly ["Status: in progress"];
                                        };
                                    };
                                };
                            };
                            readonly owned: {
                                readonly type: "boolean";
                                readonly description: "Defines whether the card is owned by the application making the call.";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\n\n`disconnected` `connected` `disabled`";
                                readonly enum: readonly ["disconnected", "connected", "disabled"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the app card.";
                                readonly examples: readonly ["sample app card item"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly imageUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL.\nThe URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:\n`format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the image.";
                                readonly examples: readonly ["Sample image title"];
                            };
                            readonly altText: {
                                readonly type: "string";
                                readonly description: "A description (alt-text) to help people understand what is depicted here.";
                                readonly examples: readonly ["Sample image alt text"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly documentUrl: {
                                readonly type: "string";
                                readonly description: "The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.\n`redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.\nIf the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.";
                                readonly examples: readonly ["https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "A short text header to identify the document.";
                                readonly examples: readonly ["Sample document title"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains shape item data, such as the content or the type of the shape.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The text you want to display on the shape.";
                                readonly examples: readonly ["Hello"];
                            };
                            readonly shape: {
                                readonly type: "string";
                                readonly default: "rectangle";
                                readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                                readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains frame item data, such as the title, frame type, or frame format.";
                        readonly properties: {
                            readonly format: {
                                readonly type: "string";
                                readonly default: "custom";
                                readonly description: "Only custom frames are supported at the moment.\n\n`custom` `desktop` `phone` `tablet` `a4` `letter` `ratio_1x1` `ratio_4x3` `ratio_16x9`";
                                readonly enum: readonly ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "Title of the frame. This title appears at the top of the frame.";
                                readonly examples: readonly ["Sample frame title"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "freeform";
                                readonly description: "Only free form frames are supported at the moment.\n\n`freeform` `heap` `grid` `rows` `columns` `unknown`";
                                readonly enum: readonly ["freeform", "heap", "grid", "rows", "columns", "unknown"];
                            };
                            readonly showContent: {
                                readonly type: "boolean";
                                readonly default: true;
                                readonly description: "Hide or reveal the content inside a frame (Enterprise plan only).";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                        readonly properties: {
                            readonly content: {
                                readonly type: "string";
                                readonly description: "The actual text (content) that appears in the sticky note item.";
                                readonly examples: readonly ["Hello"];
                            };
                            readonly shape: {
                                readonly type: "string";
                                readonly default: "square";
                                readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                                readonly enum: readonly ["square", "rectangle"];
                            };
                        };
                    }];
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["sticky_note"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateShapeItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains shape item data, such as the content or the type of the shape.";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The text you want to display on the shape.";
                        readonly examples: readonly ["Hello"];
                    };
                    readonly shape: {
                        readonly type: "string";
                        readonly default: "rectangle";
                        readonly description: "Defines the geometric shape of the item when it is rendered on the board.";
                        readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the shape style, such as the border color or opacity.";
                readonly properties: {
                    readonly borderColor: {
                        readonly type: "string";
                        readonly description: "Defines the color of the border of the shape.";
                    };
                    readonly borderOpacity: {
                        readonly type: "string";
                        readonly description: "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly borderStyle: {
                        readonly type: "string";
                        readonly description: "Defines the style used to represent the border of the shape.";
                        readonly enum: readonly ["normal", "dotted", "dashed"];
                    };
                    readonly borderWidth: {
                        readonly type: "string";
                        readonly description: "Defines the thickness of the shape border, in dp.";
                        readonly maximum: 24;
                        readonly minimum: 1;
                    };
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the text within the shape item.";
                        readonly examples: readonly ["#1a1a1a"];
                    };
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`";
                        readonly examples: readonly ["#8fd14f"];
                    };
                    readonly fillOpacity: {
                        readonly type: "string";
                        readonly description: "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\n";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly fontFamily: {
                        readonly type: "string";
                        readonly description: "Defines the font type for the text in the shape item.";
                        readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Defines the font size, in dp, for the text on the shape.";
                        readonly maximum: 288;
                        readonly minimum: 10;
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is horizontally aligned.";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                    readonly textAlignVertical: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is vertically aligned.";
                        readonly enum: readonly ["top", "middle", "bottom"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or height.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly examples: readonly [60];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly examples: readonly [320];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains shape item data, such as the content or the type of the shape.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The text you want to display on the shape.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "rectangle";
                            readonly description: "Defines the geometric shape of the item when it is rendered on the board.\n\n`rectangle` `round_rectangle` `circle` `triangle` `rhombus` `parallelogram` `trapezoid` `pentagon` `hexagon` `octagon` `wedge_round_rectangle_callout` `star` `flow_chart_predefined_process` `cloud` `cross` `can` `right_arrow` `left_arrow` `left_right_arrow` `left_brace` `right_brace`";
                            readonly enum: readonly ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the shape style, such as the border color or opacity.";
                    readonly properties: {
                        readonly borderColor: {
                            readonly type: "string";
                            readonly description: "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray).";
                        };
                        readonly borderOpacity: {
                            readonly type: "string";
                            readonly description: "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: If a value for `borderColor` is passed, the default value for `borderColor` is `1.0`. If a value for `borderColor` is not passed, the default value is `0.0`.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly borderStyle: {
                            readonly type: "string";
                            readonly description: "Defines the style used to represent the border of the shape.\nDefault: `normal`.\n\n`normal` `dotted` `dashed`";
                            readonly enum: readonly ["normal", "dotted", "dashed"];
                        };
                        readonly borderWidth: {
                            readonly type: "string";
                            readonly description: "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.";
                            readonly maximum: 24;
                            readonly minimum: 1;
                        };
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.";
                            readonly examples: readonly ["#8fd14f"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Defines the font type for the text in the shape item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.";
                            readonly maximum: 288;
                            readonly minimum: 10;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["shape"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateStickyNoteItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The actual text (content) that appears in the sticky note item.";
                        readonly examples: readonly ["Hello"];
                    };
                    readonly shape: {
                        readonly type: "string";
                        readonly default: "square";
                        readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.";
                        readonly enum: readonly ["square", "rectangle"];
                    };
                };
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a sticky note item, such as the fill color or text alignment.";
                readonly properties: {
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Fill color for the sticky note.";
                        readonly enum: readonly ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"];
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is horizontally aligned.";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                    readonly textAlignVertical: {
                        readonly type: "string";
                        readonly description: "Defines how the sticky note text is vertically aligned.";
                        readonly enum: readonly ["top", "middle", "bottom"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.";
                readonly properties: {
                    readonly height: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Height of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains sticky note item data, such as the content or shape of the sticky note.";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the sticky note item.";
                            readonly examples: readonly ["Hello"];
                        };
                        readonly shape: {
                            readonly type: "string";
                            readonly default: "square";
                            readonly description: "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\n\n`square` `rectangle`";
                            readonly enum: readonly ["square", "rectangle"];
                        };
                    };
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a sticky note item, such as the fill color or text alignment.";
                    readonly properties: {
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Fill color for the sticky note.\nDefault: `light_yellow`.\n\n`gray` `light_yellow` `yellow` `orange` `light_green` `green` `dark_green` `cyan` `light_pink` `pink` `violet` `red` `light_blue` `blue` `dark_blue` `black`";
                            readonly enum: readonly ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"];
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                        readonly textAlignVertical: {
                            readonly type: "string";
                            readonly description: "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\n\n`top` `middle` `bottom`";
                            readonly enum: readonly ["top", "middle", "bottom"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["sticky_note"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateTextItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly data: {
                readonly type: "object";
                readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                readonly properties: {
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The actual text (content) that appears in the text item.";
                        readonly examples: readonly ["Hello"];
                    };
                };
                readonly required: readonly ["content"];
            };
            readonly style: {
                readonly type: "object";
                readonly description: "Contains information about the style of a text item, such as the fill color or font family.";
                readonly properties: {
                    readonly color: {
                        readonly type: "string";
                        readonly description: "Hex value representing the color for the text within the text item.";
                        readonly examples: readonly ["#1a1a1a"];
                    };
                    readonly fillColor: {
                        readonly type: "string";
                        readonly description: "Background color of the text item.";
                        readonly examples: readonly ["#e6e6e6"];
                    };
                    readonly fillOpacity: {
                        readonly type: "string";
                        readonly description: "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid";
                        readonly maximum: 1;
                        readonly minimum: 0;
                    };
                    readonly fontFamily: {
                        readonly type: "string";
                        readonly description: "Font type for the text in the text item.";
                        readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                    };
                    readonly fontSize: {
                        readonly type: "string";
                        readonly description: "Font size, in dp.";
                        readonly minimum: 1;
                    };
                    readonly textAlign: {
                        readonly type: "string";
                        readonly description: "Horizontal alignment for the item's content.";
                        readonly enum: readonly ["left", "right", "center"];
                    };
                };
            };
            readonly position: {
                readonly type: "object";
                readonly description: "Contains information about the item's position on the board, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                readonly properties: {
                    readonly x: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly y: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                        readonly examples: readonly [100];
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly geometry: {
                readonly type: "object";
                readonly description: "Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content.";
                readonly properties: {
                    readonly rotation: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                    readonly width: {
                        readonly type: "number";
                        readonly format: "double";
                        readonly description: "Width of the item, in pixels.\nThe minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.\nFor example, if the font size of the `text` item is `14`, the minimum `width` is `24`.";
                        readonly minimum: -1.7976931348623157e+308;
                        readonly maximum: 1.7976931348623157e+308;
                    };
                };
            };
            readonly parent: {
                readonly type: "object";
                readonly description: "Contains information about the parent this item must be attached to. A maximum of 5000 items can be attached to a frame. Passing `null` for `parent.id` directly attaches an item to the canvas.";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly format: "int64";
                        readonly description: "Unique identifier (ID) of the parent frame for the item.";
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly board_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the board where you want to update the item.";
                };
                readonly item_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unique identifier (ID) of the item that you want to update.";
                };
            };
            readonly required: readonly ["board_id", "item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier (ID) of an item.";
                    readonly examples: readonly ["3458764517517819000"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).";
                    readonly properties: {
                        readonly content: {
                            readonly type: "string";
                            readonly description: "The actual text (content) that appears in the text item.";
                            readonly examples: readonly ["Hello"];
                        };
                    };
                    readonly required: readonly ["content"];
                };
                readonly style: {
                    readonly type: "object";
                    readonly description: "Contains information about the style of a text item, such as the fill color or font family.";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                            readonly description: "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.";
                            readonly examples: readonly ["#1a1a1a"];
                        };
                        readonly fillColor: {
                            readonly type: "string";
                            readonly description: "Background color of the text item.\nDefault: `#ffffff`.";
                            readonly examples: readonly ["#e6e6e6"];
                        };
                        readonly fillOpacity: {
                            readonly type: "string";
                            readonly description: "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided.";
                            readonly maximum: 1;
                            readonly minimum: 0;
                        };
                        readonly fontFamily: {
                            readonly type: "string";
                            readonly description: "Font type for the text in the text item.\nDefault: `arial`.\n\n`arial` `abril_fatface` `bangers` `eb_garamond` `georgia` `graduate` `gravitas_one` `fredoka_one` `nixie_one` `open_sans` `permanent_marker` `pt_sans` `pt_sans_narrow` `pt_serif` `rammetto_one` `roboto` `roboto_condensed` `roboto_slab` `caveat` `times_new_roman` `titan_one` `lemon_tuesday` `roboto_mono` `noto_sans` `plex_sans` `plex_serif` `plex_mono` `spoof` `tiempos_text` `formular`";
                            readonly enum: readonly ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"];
                        };
                        readonly fontSize: {
                            readonly type: "string";
                            readonly description: "Font size, in dp.\nDefault: `14`.";
                            readonly minimum: 1;
                        };
                        readonly textAlign: {
                            readonly type: "string";
                            readonly description: "Horizontal alignment for the item's content.\nDefault: `center.`\n\n`left` `right` `center`";
                            readonly enum: readonly ["left", "right", "center"];
                        };
                    };
                };
                readonly position: {
                    readonly type: "object";
                    readonly description: "Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates.";
                    readonly properties: {
                        readonly origin: {
                            readonly type: "string";
                            readonly default: "center";
                            readonly description: "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported (center).\n\n`center`";
                            readonly enum: readonly ["center"];
                        };
                        readonly relativeTo: {
                            readonly type: "string";
                            readonly enum: readonly ["canvas_center", "parent_top_left"];
                            readonly description: "`canvas_center` `parent_top_left`";
                        };
                        readonly x: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly y: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: 0.\nThe center point of the board has `x: 0` and `y: 0` coordinates.";
                            readonly examples: readonly [100];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly slotId: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the slot on the doc where the item is placed. This helps determine where in the doc a certain item  has been placed. This is used only for Miro docs currently.";
                            readonly examples: readonly ["123"];
                        };
                    };
                };
                readonly geometry: {
                    readonly type: "object";
                    readonly description: "Contains geometrical information about the item, such as its width or height.";
                    readonly properties: {
                        readonly height: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Height of the item, in pixels.";
                            readonly examples: readonly [60];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly rotation: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.";
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly format: "double";
                            readonly description: "Width of the item, in pixels.";
                            readonly examples: readonly [320];
                            readonly minimum: -1.7976931348623157e+308;
                            readonly maximum: 1.7976931348623157e+308;
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly createdBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who created the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly modifiedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).";
                    readonly examples: readonly ["2022-03-30T17:26:50.000Z"];
                };
                readonly modifiedBy: {
                    readonly type: "object";
                    readonly description: "Contains information about the user who last modified the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier (ID) of the user.";
                            readonly examples: readonly ["3458764517517852417"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of object returned. In this case, `type` returns `user`.";
                            readonly examples: readonly ["user"];
                        };
                    };
                };
                readonly parent: {
                    readonly type: "object";
                    readonly description: "Contains information about the parent frame for the item.";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly format: "int64";
                            readonly description: "Unique identifier (ID) of the parent frame for the item.";
                            readonly examples: readonly ["3074457362577955300"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly links: {
                            readonly type: "object";
                            readonly description: "Contains applicable links for the current object.";
                            readonly properties: {
                                readonly self: {
                                    readonly type: "string";
                                    readonly description: "Link to obtain more information about the current object.";
                                    readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"];
                                };
                            };
                        };
                    };
                };
                readonly links: {
                    readonly type: "object";
                    readonly description: "Contains applicable links for the item.";
                    readonly properties: {
                        readonly related: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the child items related to the frame.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="];
                        };
                        readonly self: {
                            readonly type: "string";
                            readonly description: "Link to obtain information about the current item.";
                            readonly examples: readonly ["http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of item that is returned.";
                    readonly examples: readonly ["text"];
                };
            };
            readonly required: readonly ["id", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 400;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "invalidParameters";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 404;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "notFound";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 409;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "conflict";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "integer";
                    readonly description: "HTTP status code.";
                    readonly default: 429;
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Description of the status code.";
                    readonly default: "tooManyRequests";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Explanation for the error";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the object returned.";
                    readonly default: "error";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { CopyBoard, CreateAppCardItem, CreateBoard, CreateCardItem, CreateConnector, CreateDocumentItemUsingUrl, CreateEmbedItem, CreateImageItemUsingUrl, CreateShapeItem, CreateStickyNoteItem, CreateTextItem, DeleteAppCardItem, DeleteBoard, DeleteCardItem, DeleteConnector, DeleteDocumentItem, DeleteEmbedItem, DeleteImageItem, DeleteItem, DeleteShapeItem, DeleteStickyNoteItem, DeleteTextItem, GetAppCardItem, GetBoardMembers, GetBoards, GetCardItem, GetConnector, GetConnectors, GetDocumentItem, GetEmbedItem, GetImageItem, GetItems, GetShapeItem, GetSpecificBoard, GetSpecificBoardMember, GetSpecificItem, GetStickyNoteItem, GetTextItem, RemoveBoardMember, ShareBoard, UpdateAppCardItem, UpdateBoard, UpdateBoardMember, UpdateCardItem, UpdateConnector, UpdateDocumentItemUsingUrl, UpdateEmbedItem, UpdateImageItemUsingUrl, UpdateItemPositionOrParent, UpdateShapeItem, UpdateStickyNoteItem, UpdateTextItem };
